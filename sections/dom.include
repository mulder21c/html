<section>
<!--
████████   ███████  ██     ██
██     ██ ██     ██ ███   ███
██     ██ ██     ██ ████ ████
██     ██ ██     ██ ██ ███ ██
██     ██ ██     ██ ██     ██
██     ██ ██     ██ ██     ██
████████   ███████  ██     ██
-->

<h2 id="dom">HTML 문서의 의미론, 구조, API</h2>

<h3 id="documents">문서</h3>

  HTML 유저 에이전트에서 모든 XML과 HTML 문서는 {{Document}} 객체로 표현됩니다.
  [[!DOM]]

  <dfn lt="the document address|address|the document's address|the address">문서의 주소</dfn>는
  <i>{{Document}}와 연관된 URL</i>입니다(DOM 표준에 정의된 대로). 그것은 {{Document}}가 생성될 때 
  초기에 설정되지만, {{Document}}의 수명 기간 동안 변경될 수 있습니다; 예를 들어, 사용자가 페이지의
  <a for="url" lt="fragment">문서 조각</a>으로 <a lt="navigates">이동</a>할 때 그리고 
  <code>pushState()</code> 메서드가 새로운 <a for="url">URL</a>을 가지고 호출 될 때 변경됩니다. [[!DOM]]

  <p class="warning">
    대화형 유저 에이전트는 보통 유저 인터페이스에 <a lt="the document's address">문서의 주소</a>를 노출합니다.
    이것은 사이트가 다른 사람으로 가장하려하는지를 사용자가 알 수 있는 주된 메커니즘입니다.
  </p>

  {{Document}}가 <code>createDocument()</code>나 <code>createHTMLDocument()</code> API를 사용하여
  <a for="concept" lt="script">스크립트</a>에 의해 생성되는 경우, <a lt="the document's address">문서의 주소</a>는
  스크립트의 <a lt="settings object">설정 객체</a>에 의해 명시된 <a lt="responsible document">신뢰할 수 있는 문서</a>의
  <a lt="the document's address">문서의 주소</a>와 동일하고, {{Document}}는 즉시 
  <a lt="ready for post-load tasks">로딩 후 작업에 대해 준비</a>되며 <a lt="completely loaded">완전히 로드</a>됩니다.

  <dfn lt="The document's referrer">문서의 리퍼러</dfn>는 {{Document}}가 생성될 때 설정될 수 있는
  <a lt="absolute URL">절대 URL</a>입니다. 이것이 명시적으로 설정되지 않는다면, 그 값은 빈 문자열입니다.

  각 {{Document}} 객체는 처음에는 설정되어 있지 않은 <dfn lt="reload override flag">리로드 재정의 플래그</dfn>를
  가집니다. 이 플래그는 특정한 상황에서 <code>document.open()</code>과 <a method lt="write()"><code>document.write()</code></a> 
  메서드에 의해 설정됩니다. 플래그가 설정 되는 경우, {{Document}}는 리로드 될 때 문서의 소스로
  사용되는 유니코드 문자열인 <dfn lt="reload override buffer">리로드 재정의 버퍼</dfn>를 가집니다.

  유저 에이전트가 <a lt="source browsing context">소스 브라우징 컨텍스트</a>가 주어진, 
  <dfn lt="overridden reload|an overridden reload">재정의 된 리로드</dfn>를 수행하려면, 다음과 같이 
  동작해야(must) 합니다:


  1. <var>source</var>를 <a lt="browsing context">브라우징 컨텍스트</a>의 <a lt="active document">활성 문서</a>의
      <a lt="reload override buffer">리로드 재정의 버퍼</a>의 값으로 둡니다.
  2. <var>address</var>를 <a lt="browsing context">브라우징 컨텍스트</a>의 <a lt="active document">활성 문서</a>의
      <a lt="document url">URL</a>로 둡니다.
  3. <var>HTTPS state</var>를 <a lt="browsing context">브라우징 컨텍스트</a>의 <a lt="active document">활성 문서</a>의 
      <a for="document" lt="HTTPS state">HTTPS 상태</a>로 둡니다.
  4. <var>CSP list</var>를 <a lt="browsing context">브라우징 컨텍스트</a>의 <a lt="active document">활성 문서</a>의 
       <a for="document" lt="CSP list">CSP 목록</a>으로 둡니다.
  5. <a lt="browsing context">브라우징 컨텍스트</a>를 <a lt="exceptions enabled flag">예외 활성화 플래그</a>와
      <a lt="replacement enabled">교체 활성화</a>를 가지고 <a for="response">body</a>가 <var>source</var>이고,
      <a for="response" lt="CSP list">CSP 목록</a>이 <var>CSP list</var>이고 <a for="response" lt="HTTPS state">HTTP 상태</a>가
      <var>HTTPS state</var>인 새로운 <a lt="response">응답</a>으로 <a lt="Navigate">이동</a>합니다.
      <a lt="source browsing context">소스 브라우징 컨텍스트</a> 는 <a lt="overridden reload">재정의 된 리로드</a>
      알고리즘에 주어진 것입니다. <a lt="navigate">이동</a> 알고리즘이 이 목적을 위해 {{Document}} 
      객체를 생성할 경우, 그 {{Document}}의 <a lt="reload override flag">리로드 재정의 플래그</a>를
      설정하고 그것의 <a lt="reload override buffer">리로드 재정의 버퍼</a>를 <var>source</var>로
      설정합니다. 모든 예외를 다시 던집니다.

      <a lt="navigation algorithm">이동 알고리즘</a>에서 <a lt="set the document's address">문서의 주소를 설정</a>할 
      때가 되면, <a lt="override URL">재정의 URL</a>로 <var>address</var>를 사용합니다.

<h4 id="the-document-object"><dfn element>Document</dfn> 객체</h4>

  DOM 명세는 {{Document}} 인터페이스를 정의하고, 이 명세는 이를 크게 확장합니다:

  <pre class="idl" data-highlight="webidl" dfn-for="Document">
    enum DocumentReadyState { "loading", "interactive", "complete" };

    [OverrideBuiltins]
    partial /*sealed*/ interface Document {
      // resource metadata management
      [PutForwards=href, Unforgeable] readonly attribute Location? location;
      attribute DOMString domain;
      readonly attribute DOMString referrer;
      attribute DOMString cookie;
      readonly attribute DOMString lastModified;
      readonly attribute DocumentReadyState readyState;

      // DOM tree accessors
      getter object (DOMString name);
      attribute DOMString title;
      attribute DOMString dir;
      attribute HTMLElement? body;
      readonly attribute HTMLHeadElement? head;
      [SameObject] readonly attribute HTMLCollection images;
      [SameObject] readonly attribute HTMLCollection embeds;
      [SameObject] readonly attribute HTMLCollection plugins;
      [SameObject] readonly attribute HTMLCollection links;
      [SameObject] readonly attribute HTMLCollection forms;
      [SameObject] readonly attribute HTMLCollection scripts;
      NodeList getElementsByName(DOMString elementName);
      readonly attribute HTMLScriptElement? currentScript;

      // dynamic markup insertion
      Document open(optional DOMString type = "text/html", optional DOMString replace = "");
      WindowProxy open(DOMString url, DOMString name, DOMString features, optional boolean replace = false);
      void close();
      void write(DOMString... text);
      void writeln(DOMString... text);

      // user interaction
      readonly attribute WindowProxy? defaultView;
      readonly attribute Element? activeElement;
      boolean hasFocus();
      attribute DOMString designMode;
      boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = "");
      boolean queryCommandEnabled(DOMString commandId);
      boolean queryCommandIndeterm(DOMString commandId);
      boolean queryCommandState(DOMString commandId);
      boolean queryCommandSupported(DOMString commandId);
      DOMString queryCommandValue(DOMString commandId);

      // special event handler IDL attributes that only apply to Document objects
      [LenientThis] attribute EventHandler onreadystatechange;
    };
    Document implements GlobalEventHandlers;
    Document implements DocumentAndElementEventHandlers;
  </pre>

  {{Document}}는 초기에 "<code>none</code>"인 <dfn for="document" lt="HTTPS state">HTTP 상태</dfn>
  (<a lt="HTTPS state value">HTTPS 상태 값</a>)를 가지고, 이것은 {{Document}}의 데이터를 전달하는데
  사용된 네트워크 채널의 보안 속성(property)들을 나타냅니다.

  {{Document}}는 <dfn for="document" lt="CSP list">CSP 목록</dfn>을 가지고, 이것은 이 컨텍스트에서
  <a lt="Content Security Policy">콘텐트 보안 정책</a>의 목록입니다. 달리 명시되지 않는 한 목록은
  비어있습니다.

<h4 id="resource-metadata-management">리소스 메타데이터 관리</h4>

  <dl class="domintro">
    <dt><var>document</var> . <code>referrer</code></dt>
    <dd>
      사용자가 이 문서로 이동한 문서로부터, 차단되어 있거나 그러한 문서가 없지 않은 한, {{Document}}의
      <a lt="the address">주소</a>를 반환하고, 그러한 경우에는 빈 문자열을 반환합니다.

      <code>noreferrer</code> 링크 유형은 리퍼러를 차단하는 데 사용될 수 있습니다.
    </dd>
  </dl>

  <div class="impl">
    <dfn attribute for="Document"><code>referrer</code></dfn> 속성(attribute)은 
    <a lt="the document's referrer">문서의 리퍼러</a>를 반환해야(must) 합니다.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>cookie</code> [ = <var>value</var> ]</dt>
    <dd>
      {{Document}}에 적용되는 HTTP 쿠키를 반환합니다. 쿠키가 없거나 이 리소스에 쿠키가 적용될 수 없다면,
      빈 문자열이 반환 될 것입니다.

      새로운 쿠키를 요소(element)의 HTTP 쿠키 세트에 추가하기 위해, 설정 될 수 있습니다.

     콘텐츠가 <a lt="sandboxed into a unique origin">고유 출처(origin)에 샌드박스 되었다</a>면 (예를 들어, 
      <{iframe/sandbox}> 속성(attribute)를 가진 <code>iframe</code>안에), 가져올 때와 설정할 때
      "{{SecurityError}}" {{DOMException}}이 던져질 것입니다.
    </dd>
  </dl>

  <dfn attribute for="Document"><code>cookie</code></dfn> 속성(attribute)은 
  <a lt="the document's address">문서 주소</a>에 의해 식별되는 리소스의 쿠키를 나타냅니다.

  다음 조건 중 하나로 분류되는 {{Document}} 객체는 
  <dfn lt="cookie-averse|sandbox cookies">쿠키를 거부하는 {{Document}} 객체</dfn>입니다:

  * <a lt="browsing context">브라우징 컨텍스트</a>가 없는 {{Document}}.

  * <a lt="address">주소</a>가 서버 기반 네이밍 권한을 사용하지 않는 {{Document}}.

  가져올 때, 문서가 <a lt="cookie-averse">쿠키를 거부하는 <code>Document</code> 객체</a>라면,
  유저 에이전트는 빈 문자열을 반환해야(must) 합니다. 그렇지 않고, {{Document}}의 
  <a for="concept">출처(origin)</a>가 <a lt="opaque origin">불분명한 출처(origin)</a>라면, 유저 
  에이전트는 "{{SecurityError}}" {{DOMException}}를 던져야(must) 합니다. 그렇지 않으면, 유저 
  에이전트는 "non-HTTP" API를 위해 <a lt="UTF-8 decode without BOM">BOM 없는 UTF-8 디코드</a>를 
  사용하여 디코드 된 <a lt="the document's address">문서의 주소</a>에 대한 
  <a lt="cookie-string">쿠키 문자열</a>을 반환해야(must) 합니다. [[!COOKIES]]
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(이것은 지문 그림입니다.)" /></a>

  설정할 때, 문서가 <a lt="cookie-averse">쿠키를 거부하는 <code>Document</code> 객체</a>라면, 
  유저 에이전트는 아무 것도 하지 않아야(must) 합니다. 그렇지 않고, {{Document}}의 <a for="concept">출처(origin)</a>가
  <a lt="opaque origin">불분명한 출처(origin)</a>이라면, 유저 에이전트는 "{{SecurityError}}" 
  {{DOMException}}를 던져야 합니다. 그렇지 않으면, 유저 에이전트는 <a lt="encoded as UTF-8">UTF-8로 인코드 된</a>
  새로운 값으로 구성하여, "non-HTTP" API를 통해 <a lt="the document's address">문서의 주소</a>에 대해 
  <a lt="receiving a set-cookie-string">설정 쿠키 문자열을 받는</a> 경우와 같이 동작해야(must) 합니다. 
  [[!COOKIES]] [[!ENCODING]]

  <p class="note">
    <code>cookie</code> 속성(attribute)은 프레임 전반에 접근이 가능하기 때문에, 쿠키에 대한 경로 제한은
    사이트의 어느 부분으로 어떤 쿠키가 전송되는지를 관리하는데 도움이 되는 도구일 뿐이고, 어떤 방식으로든
    보안 기능이 아닙니다.
  </p>

  <p class="warning">
    <code>cookie</code> 속성(attribute)의 getter와 setter는 동기적으로 공유 된 상태에 접근합니다.
    잠금 매커니즘이 없기 때문에, 다중 프로세스 유저 에이전트에서 다른 브라우징 컨텍스트는 스크립트가 
    수행되는 중에 쿠키를 수정할 수 있습니다. 예를 들어, 사이트는 쿠키 값을 읽고, 그 값을 증가시키고,
    세션에 대한 고유 식별자로서 쿠키의 새로운 값을 사용하여, 다시 그것을 작성하는 것을 시도할 수
    있습니다; 사이트가 동시에 두 개의 다른 브라우저에서 이것을 두 번 수행한다면, 잠재적으로 형편없는 
    영향을 가지고, 양쪽 세션에 대해 동일한 "고유" 식별자를 사용하게 됩니다.
  </p>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>lastModified</code></dt>
    <dd>
      사용자의 로컬 표준 시간대에 따라, "<code>MM/DD/YYYY&nbsp;hh:mm:ss</code>" 형식으로 서버에 
      의해 보고 된 대로, 문서에 대한 마지막 수정한 날짜를 반환합니다.

      마지막 수정 날짜가 알 수 없다면, 현재 시간이 대신 반환됩니다.
    </dd>
  </dl>

  <div class="impl">
    가져올 때, <dfn attribute for="Document"><code>lastModified</code></dfn> 속성(attribute)은 
    사용자의 로컬 표준 시간대에 따라 {{Document}}의 소스 파일의 마지막 수정 날짜와 시간을 다음 형식
    에 따라 반환해야(must) 합니다:

    1. 날짜의 월 컴포넌트.
    2. U+002F 슬래쉬 문자 (/).
    3. 날짜의 일 컴포넌트.
    4. U+002F 슬래쉬 문자 (/).
    5. 날짜의 연 컴포넌트
    6. U+0020 공백 문자.
    7. 시간의 시 컴포넌트.
    8. U+003A 콜론 문자 (:).
    9. 시간의 분 컴포넌트.
    10. U+003A 콜론 문자 (:).
    11. 시간의 초 컴포넌트.

    연도를 제외한, 위 모든 숫자 컴포넌트는 필요하다면 0을 채워, 10 진수 숫자를 나타내는 두 
    <a lt="ASCII digits">ASCII 숫자</a>로 주어져야(must) 합니다. 연도는 필요하다면 0을 채워, 10 진수
    숫자를 나타내는 4개 이상의 <a lt="ASCII digits">ASCII 숫자</a>의 가능한 가장 짧은 문자열로 
    주어져야 합니다.

    {{Document}}의 소스 파일의 마지막 수정 날짜와 시간은 사용된 네트워크 프로토콜의 관련 기능으로부터,
    예를 들어, 문서의 HTTP <code>Last-Modified</code> 헤더의 값으로부터, 혹은 로컬 파일에 대한 파일  
    시스템 메타데이터로부터 얻어져야(must) 합니다. 마지막 수정 날짜와 시간을 알 수 없다면, 
    속성(attribute)은 위 형식에 따라 현재 날짜와 시간을 반환해야(must) 합니다.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>readyState</code></dt>
    <dd>
      {{Document}}가 로딩되는 동안 "<code>loading</code>"을, 일단 해석이 끝났으나 아직 서브-리소스를
      로딩 중에는 "<code>interactive</code>"를, 로드가 완료되었다면 "<code>complete</code>"를 
      반환합니다.

      이 값이 바뀔 경우 {{Document}} 객체에서 <code>readystatechange</code> 이벤트가 발생합니다.
    </dd>
  </dl>

  <div class="impl">
    각 문서는 <dfn lt="current document readiness">현재 문서 준비상태</dfn>를 가집니다. {{Document}} 
    객체가 생성될 때, 문서가 <a lt="HTML parser">HTML 해석기</a>, <a lt="XML parser">XML 해석기</a>, 
    혹은 XSLT 처리기와 연관된다면 {{Document}}는 문자열 "<code>loading</code>"로, 그렇지 않으면 문자열 
    "<code>complete</code>"로 설정 된 그것의 <a lt="current document readiness">현재 문서 준비상태</a>를
    가져야(must) 합니다. 페이지 로딩 동안 다양한 알고리즘은 이 값에 영향을 끼칩니다. 값이 설정된 경우,
    유저 에이전트는 {{Document}} 객체에 <code>readystatechange</code>로 명명된
    <a lt="fire a simple event">단순한 이벤트를 발생</a> 시켜야(must) 합니다.

    {{Document}}는 아직 <a lt="stopped">멈추거나</a> <a lt="aborted">중단 되지</a> 않은 
    <a lt="HTML parser">HTML 해석기</a>나 <a lt="XML parser">XML 해석기</a>와 연관된다면 
    <dfn lt="active parser">활성화 해석기</dfn>를 가진다고 합니다.

    <dfn attribute for="Document"><code>readyState</code></dfn> IDL 속성(attribute)은 가져올 때,
    <a lt="current document readiness">현재 문서 준비상태</a>를 반환해야(must) 합니다.
  </div>

<h4 id="dom-tree-accessors">DOM 트리 접근자</h4>

  문서의 <{html}> 요소(element)는 문서의 루트 요소(element)가 하나 존재하고 그것이 <{html}> 요소(element)라면
  문서의 루트 요소(element)이고, 그렇지 않으면 null입니다.

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>head</code></dt>
    <dd><{head}> 요소(element)를 반환합니다.</dd>
  </dl>

  문서의 <{head}> 요소(element)는 <{html}> 요소(element)의 자식인 첫 번째 <{head}> 요소(element)가
  하나 존재한다면 문서의 <{head}> 요소(element)이고, 그렇지 않으면 null 입니다.

  <div class="impl">
    <dfn attribute for="Document"><code>head</code></dfn> 속성(attribute)은, 가져올 때, 문서의  must return
    <{head}> 요소(element) (<{head}> 요소(element)나 null)를 반환해야(must) 합니다.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>title</code> [ = <var>value</var> ]</dt>
    <dd>
      HTML에 대해 <a element for="html"><code>title</code></a> 요소(element)에 의해 주어진 대로,
      SVG에 대해 SVG <a element for="svg"><code>title</code></a> 요소(element)에 의해 주어진 대로,
      문서의 제목을 반환합니다.

      문서의 제목을 업데이트하기 위해, 설정될 수 있습니다. 업데이트를 위한 적절한 요소(element)가 
      없다면, 새로운 값은 무시됩니다.
    </dd>
  </dl>

  문서의 <a element for="html"><code>title</code></a> 요소(element)는 문서에 하나만 존재한다면 
  문서의 첫 번째 <a element for="html"><code>title</code></a> 요소(element)이고 
  (<a lt="tree order">트리 순서에 따라</a>), 그렇지 않으면 null 입니다.

  <div class="impl">
    <dfn attribute for="Document"><code>title</code></dfn> 속성(attribute)은 가져올 때, 다음 알고리즘을 수행해야(must) 합니다:

    1. <a lt="root element">루트 요소(element)</a>가 <a lt="SVG namespace">SVG 네임스페이스</a>에 있는
        <{svg}> 요소(element)라면 <var>value</var>를 <a lt="root element">루트 요소(element)</a>의 자식인
        <a lt="SVG namespace">SVG 네임스페이스</a>에 있는 첫 번째 <a element for="svg"><code>title</code></a> 
        요소(element)의 모든 자식 <code>Text</code> 노드의 데이터의 연결로 둡니다. [[!SVG11]]
    2. 그렇지 않으면, <var>value</var>를 <a lt="tree order">트리 순서에 따라</a> 
        <a element for="html"><code>title</code></a> 요소(element)의 모든 자식 <code>Text</code> 
        노드의 데이터의 연결로 두고, <a element for="html"><code>title</code></a> 요소(element)가 null 
        이라면 빈 문자열로 둡니다.
    3. <var>value</var>에서 <a lt="Strip and collapse whitespace">여백 문자를 들어내고 병합</a>합니다.
    4. <var>value</var>를 반환합니다.

    설정할 때, 다음 목록의 처음 일치하는 조건에 해당하는 단계를 수행해야(must) 합니다:

    <dl class="switch">
      <dt>
        <a lt="root element">루트 요소(element)</a>가 <a lt="SVG namespace">SVG 네임스페이스</a>에 있는
        <{svg}> 요소(element)라면 [[!SVG11]]
      </dt>
      <dd>
        1. <var>element</var>를 <a lt="root element">루트 요소(element)</a>의 자식인 
            <a lt="SVG namespace">SVG 네임스페이스</a>에 있는 첫 번째 <a element for="svg"><code>title</code></a> 
            요소(element)가 있다면, 그것으로 둡니다. 그것이 없다면, <a lt="SVG namespace">SVG 네임스페이스</a>에
            <a element for="svg"><code>title</code></a> 요소(element)를 생성하고, <a lt="root element">루트 요소(element)</a>의
            첫 번째 자식으로 추가하고, <var>element</var>를 그 요소(element)로 둡니다. [[!SVG11]]
        2. <var>element</var>의 {{Node/textContent}} IDL 속성(attribute)이 할당되는 새로운 값으로
            설정된 것 처럼 동작합니다.
      </dd>

      <dt><a lt="root element">루트 요소(element)</a>가 <a lt="HTML namespace">HTML 네임스페이스</a>에 있다면</dt>
      <dd>
        1. <a element for="html"><code>title</code></a> 요소(element)가 null이고 <{head}> 요소(element)가
            null이라면, 이 단계들을 중단합니다.
        2. <a element for="html"><code>title</code></a> 요소(element)가 null이라면, 새로운 <code>title</code>
            요소(element)를 생성하고 <{head}> 요소(element)에 <a lt="append">추가(append)</a>하고,
            <var>element</var>를 새롭게 생성된 요소(element)로 둡니다; 그렇지 않으면,
            <var>element</var>를 <a element for="html"><code>title</code></a> 요소(element)로 둡니다.
        3. <var>element</var>의 {{Node/textContent}} IDL 속성(attribute)이 할당되는 새로운 값으로
            설정된 것 처럼 동작합니다.
      </dd>

      <dt>그렇지 않으면</dt>
      <dd>아무 것도 하지 않습니다.</dd>
    </dl>
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>body</code> [ = <var>value</var> ]</dt>
    <dd>
      <{body}> 요소(element)를 반환합니다.

      <{body}> 요소(element)를 바꾸기 위해, 설정 될 수 있습니다.

      새로운 값이 <code>body</code>나 <{frameset}> 요소(element)가 아니라면, 이것은
      <code>HierarchyRequestError</code> 예외를 던질 것입니다.
    </dd>
  </dl>

  문서의 <{body}> 요소(element)는 <{html}> 요소(element)의 첫 번째 자식인 <{body}> 요소(element)나
  <{frameset}> 요소(element)입니다. 그러한 요소(element)가 없다면, null입니다.

  <div class="impl">
    <dfn attribute for="Document"><code>body</code></dfn> 속성(attribute)은 가져올 때, 문서의
    <{body}> 요소(<{body}> 요소(element)나 <{frameset}> 요소(element)나 null)를 반환해야 합니다.
    설정할 때, 다음 알고리즘을 수행해야 합니다:

    1. 새로운 값이 <{body}>나 <{frameset}> 요소(element)가 아니라면, <code>HierarchyRequestError</code>
        예외를 던지고 이 단계들을 중단합니다.
    2. 그렇지 않고, 새로운 값이 <{body}> 요소(element)와 동일하다면, 아무것도 하지 않습니다. 이
        단계들을 중단합니다.
    3. 그렇지 않고, <{body}> 요소(element)가 null이 아니라면, 루트 요소(element)의 <code>replaceChild()</code>
        메서드가 그것의 두 인자로 각각 새로운 값과 기존 <{body}> 요소(element)를 가지고 호출된 것 처럼,
        그 요소(element)를 DOM에 새로운 값으로 바꾸고, 이 단계들을 중단합니다.
    4. 그렇지 않고, 루트 요소(element)가 없다면, <code>HierarchyRequestError</code> 예외를 던지고 
        이 단계들을 중단합니다.
    5. 그렇지 않으면, <{body}> 요소(element)는 null이지만, 루트 요소(element)는 존재합니다. 
        루트 요소(element)에 새로운 값을 추가(append)합니다.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>images</code></dt>
    <dd>
      {{Document}}에 있는 <{img}> 요소(element)들의 <code>HTMLCollection</code>을 반환합니다.
    </dd>

    <dt><var>document</var> . <code>embeds</code></dt>
    <dt><var>document</var> . <code>plugins</code></dt>
    <dd>
      {{Document}}에 있는 <{embed}> 요소(element)들의 <code>HTMLCollection</code>을 반환합니다.
    </dd>

    <dt><var>document</var> . <code>links</code></dt>
    <dd>
      {{Document}}에 있는 <{links/href}> 속성(attribute)을 가진 <{a}>와 <{area}> 요소(element)들의 
      <code>HTMLCollection</code>을 반환합니다.
    </dd>

    <dt><var>document</var> . <code>forms</code></dt>
    <dd>
      {{Document}}에 있는 <{form}> 요소(element)들의 <code>HTMLCollection</code>을 반환합니다.
    </dd>

    <dt><var>document</var> . <code>scripts</code></dt>
    <dd>
      {{Document}}에 있는 <{script}> 요소(element)들의 <code>HTMLCollection</code>을 반환합니다.
    </dd>

  </dl>

  <div class="impl">
    <dfn attribute for="Document"><code>images</code></dfn> 속성(attribute)은 {{Document}} 노드에 
    뿌리를 둔 <code>HTMLCollection</code>을 반환해야(must) 하고, 이 속성(attribute)의 필터는 <{img}> 
    요소(element)들과만 일치합니다.

    <dfn attribute for="Document"><code>embeds</code></dfn> 속성(attribute)은 {{Document}} 노드에 
    뿌리를 둔 <code>HTMLCollection</code>을 반환해야(must) 하고, 이 속성(attribute)의 필터는 <{embed}> 
    요소(element)들과만 일치합니다.

    <dfn attribute for="Document"><code>plugins</code></dfn> 속성(attribute)은 <code>embeds</code> 
    속성(attribute)에 의해 반환된 것과 동일한 객체를 반환해야(must) 합니다.

    <dfn attribute for="Document"><code>links</code></dfn> 속성(attribute)은 {{Document}} 노드에 
    뿌리를 둔 <code>HTMLCollection</code>을 반환해야(must) 하고, 이 속성(attribute)의 필터는 <{links/href}> 
    속성(attribute)을 가진 <{a}> 요소(element)들과 <{links/href}> 속성(attribute)을 가진 <{area}> 
    요소(element)들과만 일치합니다.

    <dfn attribute for="Document"><code>forms</code></dfn> 속성(attribute)은 {{Document}} 노드에 
    뿌리를 둔 <code>HTMLCollection</code>을 반환해야(must) 하고, 이 속성(attribute)의 필터는 <{form}> 
    요소(element)들과만 일치합니다.

    <dfn attribute for="Document"><code>scripts</code></dfn>  속성(attribute)은 {{Document}} 노드에 
    뿌리를 둔 <code>HTMLCollection</code>을 반환해야(must) 하고, 이 속성(attribute)의 필터는 <{script}> 
    요소(element)들과만 일치합니다.

    <hr />
  </div>

  <dl class="domintro">
    <dt>
      <var>collection</var> = <var>document</var> . <code>getElementsByName</code>(<var>name</var>)
    </dt>
    <dd>
      {{Document}}에 있는 값 <var>name</var>를 가진 <code>name</code> 속성(attribute)을 가진 
      요소(element)들의 <code>NodeList</code>를 반환합니다.
    </dd>
  </dl>

  <div class="impl">
    <dfn><code>getElementsByName(<var>name</var>)</code></dfn> 메서드는 문자열 <var>name</var>을 
    사용하고, <a lt="tree order">트리 순서</a>에 따라, 그 문서 내의 값이 인자 <var>name</var>과 동일한
    (<a lt="case-sensitive">대소문자 구분</a> 방법으로) <code>name</code> 속성(attribute)를 가진 모든
    <a lt="html elements">html 요소(element)들</a>을 포함하는 <a lt="live">라이브</a> <code>NodeList</code>를
    반환해야(must) 합니다. 메서드가 {{Document}} 객체에서 동일한 인자를 가지고 다시 호출 되는 경우, 
    유저 에이전트는 이전 호출에 의해 반환된 객체와 동일한 객체를 반환할 수도 있습니다. 다른 경우에는
    새로운 <code>NodeList</code> 객체가 반환되어야(must) 합니다.
  </div>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>currentScript</code></dt>
    <dd>
      현재 실행중인 <{script}> 요소(element)를 반환합니다. 재진입 <code>script</code> 실행의 경우,
      아직 실행을 완료하지 않은 스크립트 중에서 가장 최근에 실행이 시작된 스크립트를 반환합니다.

      {{Document}}가 현재 <code>script</code> 요소(element)를 실행 중이 아니라면 (예를 들어, 수행 
      중인 스크립트가 이벤트 처리기나 타임 아웃되었기 때문에) null을 반환합니다.
    </dd>
  </dl>

  <div class="impl">
    <dfn attribute for="Document"><code>currentScript</code></dfn> 속성(attribute)은 가져올 때, 
    가장 최근에 초기화 된 값을 반환해야(must) 합니다. {{Document}}가 생성될 때, <code>currentScript</code>는
    null로 초기화 되어야(must) 합니다.
  </div>

  <div class="impl">
    <hr />

    {{Document}} 인터페이스는 <a spec="webidl" lt="support named properties">명명된 속성(property)들을 
    지원</a>합니다. 어느 순간에 <a spec="webidl" lt="supported property names">지원되는 속성(property) 
    이름들</a>은 {{Document}} 안에 있는 비어 있지 않은 <code>name</code> 콘텐트 속성(attribute)을 
    가진 모든 <{applet}>, <a lt="exposed">노출 된</a> <{embed}>, <{form}>, <{iframe}>, <{img}>, 
    <a lt="exposed">노출된</a> <code>object</code> 요소(element)들의 <code>name</code> 콘텐트 
    속성(attribute)들의 값들과, {{Document}} 안에 있는 비어 있지 않은 <code>id</code> 콘텐트 
    속성(attribute)을 가진 모든 <code>applet</code>과 <a lt="exposed">노출된</a> <{object}> 
    요소(element)들의 <code>id</code> 콘텐트 속성(attribute)들의 값들과, {{Document}} 안에 있는 비어 
    있지 않은 <code>name</code> 콘텐트 속성(attribute)과 비어있지 않은 <code>id</code> 콘텐트 
    속성(attribute)을 가진 모든 <{img}> 요소(element)들의 <code>id</code> 콘텐트 속성(attribute)들의 
    값들로 구성됩니다. <a spec="webidl" lt="supported property names">지원되는 속성(property) 이름들</a>은 
    동일한 요소(element)가 <code>id</code> 속성(attribute)과 <code>name</code> 속성(attribute) 모두를 
    제공하는 경우 <code>name</code> 속성(attribute)으로부터의 값 앞에 오는 <code>id</code> 속성(attribute)의 
    값을 가지고, 나중의 중복을 무시하여, <a lt="tree order">트리 순서</a>에 따라야(must) 합니다.

    <dfn lt="the Document object is indexed for property retrieval">{{Document}} 객체가 속성(property) 검색(retrieval)을 위해 인덱싱 되는</dfn>
    경우 <a spec="webidl" lt="determine the value of a named property">명명된 속성(property) 
    <var>name</var>의 값을 결정</a>하기 위해, 유저 에이전트는 다음 단계들을 사용하여 얻어진 값을 
    반환해야(must) 합니다:

    1. <var>elements</var>를 {{Document}}에 이름 <var>name</var>을 가진 
        <a lt="named elements">명명된 요소(element)들</a>의 목록으로 둡니다.

        <p class="note">명세에 의해, 적어도 하나의 그러한 요소(element)가 존재할 것입니다.</p>
    2. <var>elements</var>가 하나의 요소(element)만을 가지고, 그 요소(element)가 <code>iframe</code>
        요소(element)라면, 그 <{iframe}> 요소(element)에 의해 나타나는 
        <a lt="nested browsing context">중첩된 브라우징 컨텍스트</a>의 <code>WindowProxy</code>
        객체를 반환하고, 이 단계들을 중단합니다.
    3. 그렇지 않고, <var>elements</var>가 하나의 요소(element)만을 가진다면, 그 요소(element)를 
        반환하고, 이 단계들을 중단합니다.
    4. 그렇지 않으면 {{Document}}에 뿌리를 둔, 필터가 이름 <var>name</var>를 가진 
        <a lt="named elements">명명된 요소(element)들</a>에만 일치하는 <code>HTMLCollection</code>를
        반환합니다.

    위 알고리즘의 목적을 위해 이름 <var>name</var>을 가진  
    <dfn lt="Named elements">명명된 요소(element)들</dfn>은 다음 중 하나입니다:

    * 값이 <var>name</var>인 <code>name</code> 콘텐트 속성(attribute)을 가지는 <{applet}>, 
        <a lt="exposed">노출 된</a> <{embed}>, <{form}>, <{iframe}>, <{img}>, 
        <a lt="exposed">노출 된</a> <{object}> 요소(element)들, 혹은,
    * 값이 <var>name</var>인 <code>id</code> 콘텐트 속성(attribute)을 가지는 <code>applet</code> 또는
        <a lt="exposed">노출 된</a> <{object}> 요소(element)들
    * 값이 <var>name</var>인 <code>id</code> 콘텐트 속성(attribute)을 가지고, 
        비어 있지 않은 <var>name</var> 콘텐트 속성(attribute)도 가지는 <{img}> 요소(element)들

    <code>embed</code>나 <{object}> 요소(element)는 <a lt="exposed">노출 된</a> 조상 <code>object</code>를
    가지지 않고, <{object}> 요소(element)에 대해 추가적으로 요소의 <a lt="fallback content">폴백 콘텐트</a>가
    보이지 않거나 후손 <code>object</code>나 <code>embed</code>를 가지지 않는다면 
    <dfn lt="exposed">노출 되었다</dfn>라고 합니다.
  </div>

  <hr />

  <p class="note">
    {{Document}} 인터페이스에서 <code>dir</code> 속성(attribute)은 <code>dir</code> 콘텐트 
    속성(attribute)과 함께 정의됩니다.
  </p>

  <div class="impl">
    <h4 id="loading-xml-documents">XML 문서 로딩</h4>

    <pre class="idl" data-highlight="webidl" dfn-for="XMLDocument">
      partial interface XMLDocument {
        boolean load(DOMString url);
      };
    </pre>

    <dfn><code>load(<var>url</var>)</code></dfn> 메서드는 다음 단계들을 수행해야(must) 합니다:

    1. <var>document</var>를 메서드가 호출되는 {{XMLDocument}} 객체로 둡니다. 
    2. <var>url</var>을, relative to the <a lt="entry settings object">엔트리 설정 객체</a>에 관련하여 
        <a lt="parse">해석</a>합니다. 이것이 성공적이지 않다면, "{{SyntaxError}}" {{DOMException}}를 
        던지고 이 단계들을 중단합니다. 그렇지 않으면, <var>urlRecord</var>를 
        <a lt="resulting URL record">결과 URL 레코드</a>로 둡니다.
    3. <var>urlRecord</var>의 <a for="url" lt="origin">출처(origin)</a>가 <var>document</var>의
        <a for="concept" lt="origin">출처(origin)</a>와 동일한 것이 아니라면, "{{SecurityError}}"
        {{DOMException}}를 던지고 이 단계들을 중단합니다.
    4. 어떤 변경 이벤트도 발생시키지 않고, <var>document</var>의 모든 자식 노드들을 제거합니다.
    5. <var>document</var>의 <a lt="current document readiness">현재 문서 준비상태</a>를 
        "<code>loading</code>" 으로 설정합니다.
    6. <a lt="in parallel">병렬로</a> 이 단계들의 나머지를 수행하고, 메서드로부터 true를 반환합니다.
    7. <var>result</var>를 {{Document}} 객체로 둡니다.
    8. <var>success</var>를 false로 둡니다.
    9. <var>request</var>를 <a for="url">URL</a>이 <var>urlRecord</var>이고 <a lt="client">클라이언트</a>가
        <a lt="entry settings object">엔트리 설정 객체</a>이고, <a lt="destination">목적지</a>가
        "<code>subresource</code>"이며, <a lt="synchronous flag">동기 플래그</a>가 설정되고,
        <a for="request" lt="mode">모드</a>가 "<code>same-origin</code>", <a lt="credentials mode">자격 증명 모드</a>가
        "<code>same-origin</code>"이고, <a lt="use-URL-credentials flag">URL 자격 증명 사용 플래그</a>가
        설정 된 새로운 <a lt="request">요청</a>으로 둡니다
    10. <var>response</var>를 <var>request</var>를 <a lt="fetching">가져 온</a> 결과로 둡니다.
    11. <var>response</var>의 <a lt="Content-Type metadata">Content-Type 메타데이터</a>가 
        <a lt="XML MIME type">XML MIME 타입</a>이라면, 이 하위 단계들을 수행합니다:
        1. <var>result</var> 문서와 연관된 새로운 <a lt="XML parser">XML 해석기</a>를 생성합니다.
        2. 이 해석기 <var>response</var>의 <a for="response" lt="body">본문</a>을 전달합니다.
        3. XML well-formedness나 XML 네임스페이스 well-formedness 오류가 있다면, <var>result</var>로부터 
            모든 자식 노드들을 제거합니다. 그렇지 않으면, <var>success</var>를 true로 둡니다.
    12. 다음 단계들을 수행하기 위한 <a lt="Queue a task">작업을 대기열에 넣습니다</a>.
        1. <var>document</var>의 <a lt="current document readiness">현재 문서 준비상태</a>를
            "<code>complete</code>"로 설정합니다.
        2. 새로운 자식을 포함하는 <code>DocumentFragment</code>가 삽입 된 것처럼 변경 이벤트를 발생하여,
            <var>document</var>의 모든 자식을 <var>result</var>의 자식으로 바꿉니다 (그것이 자식을 
            가지지 않는다 하더라도).
        3. <var>document</var>에 <code>load</code>라고 명명된 <a>단순한 이벤트를 발생</a>시킵니다.
  </div>

<h3 id="elements">Elements</h3>

<h4 id="elements-semantics">Semantics</h4>

  Elements, attributes, and attribute values in HTML are defined (by this specification) to have
  certain meanings (semantics). For example, the <{ol}> element represents an ordered list,
  and the <{global/lang}> attribute represents the language of the content.

  These definitions allow HTML processors, like web browsers and search engines, to present
  documents and applications consistently in different contexts.

  <div class="example">
  In this example the HTML headings may be presented as large text in a desktop browser, or standard
  size text in bold in a mobile browser. In both cases the semantic information remains the same -
  that the <{h1}> and <{h2}> elements represent headings.

    <pre highlight="html">
      &lt;!doctype html&gt;
      &lt;html lang="en"&gt;
        &lt;head&gt;
          &lt;title&gt;Favorite books&lt;/title&gt;
        &lt;/head&gt;
            &lt;body&gt;
          &lt;header&gt;
            &lt;img src="logo.png" alt="Favorite books logo"&gt;
          &lt;/header&gt;
          &lt;main&gt;
            &lt;h1&gt;Favorite books&lt;/h1&gt;
            &lt;p&gt;These are a few of my favorite books.&lt;/p&gt;
            &lt;h2&gt;The Belgariad&lt;/h2&gt;
            &lt;p&gt;Five books by David and Leigh Eddings.&lt;/p&gt;
            &lt;h2&gt;The Hitchhiker's Guide to the Galaxy&lt;/h2&gt;
            &lt;p&gt;A trilogy of five books by Douglas Adams.&lt;/p&gt;
          &lt;/main&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

  This semantic information is critical to assistive technologies. For example, a screen reader will
  query the browser for semantic information and use that information to present the document or
  application in synthetic speech.

  In some cases assistive technologies use semantic information to provide additional functionality.
  A speech recognition tool might provide a voice command for moving focus to the start of the
  <{main}> element for example.

  When the appropriate HTML element or attribute is not used, it deprives HTML processors of
  valuable semantic information.

  <div class="example">
  In this example styling may be used to create a visual representation of headings and other
  components, but because the appropriate HTML elements have not been used there is little semantic
  information available to web browsers, search engines and assistive technologies.

    <pre highlight="html">
      &lt;!doctype html&gt;
      &lt;html lang="en"&gt;
        &lt;head&gt;
          &lt;title&gt;Favorite books&lt;/title&gt;
        &lt;/head&gt;
              &lt;body&gt;
          &lt;div class="header"&gt;
             &lt;img src="logo.png" alt="Favorite books logo"&gt;
          &lt;/div&gt;
          &lt;div class="main"&gt;
             &lt;span class="largeHeading"&gt;Favorite books&lt;/span&gt;
             &lt;p&gt;These are a few of my favorite books.&lt;/p&gt;
             &lt;span class="smallHeading"&gt;The Belgariad&lt;/span&gt;
             &lt;p&gt;Five books by David and Leigh Eddings.&lt;/p&gt;
             &lt;span class="smallHeading"&gt;The Hitchhiker's Guide to the Galaxy&lt;/span&gt;
             &lt;p&gt;A trilogy of five books by Douglas Adams.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

  A document can change dynamically while it is being processed. Scripting and other mechanisms can
  be used to change attribute values, text, or the entire document structure. The semantics of a
  document are therefore based on the document's state at a particular instance in time, but may
  also change in response to external events. User agents must update their presentation of the
  document to reflect these changes.

  <div class="example">
  In this example the <{audio}> element is used to play a music track. The
  <dfn attribute for="Document"><code>controls</code></dfn> attribute is used to show the user
  agent player, and as the music plays the controls are updated to indicate progress. The available
  semantic information is updated in response to these changes.

  <pre highlight="html">
    &lt;audio src="comfortablynumb.mp3" controls&gt;
  </pre>
  </div>

<h4 id="elements-in-the-dom">Elements in the DOM</h4>

  The nodes representing <a>html elements</a> in the DOM <span class="impl">must</span> implement,
  and expose to scripts, the interfaces listed for them in the relevant sections of this
  specification. This includes <a>html elements</a> in <a>XML documents</a>, even when those
  documents are in another context (e.g., inside an XSLT transform).

  Elements in the DOM <dfn>represent</dfn> things; that is, they have intrinsic <em>meaning</em>,
  also known as semantics.

  <p class="example">For example, an <{ol}> element represents an ordered list.</p>

  The basic interface, from which all the <a>html elements</a>' interfaces inherit,
  <span class="impl">and which must be used by elements that have no additional requirements,</span>
  is the {{HTMLElement}} interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLElement">
    interface HTMLElement : Element {
      // metadata attributes
      attribute DOMString title;
      attribute DOMString lang;
      attribute boolean translate;
      attribute DOMString dir;
      [SameObject] readonly attribute DOMStringMap dataset;

      // user interaction
      attribute boolean hidden;
      void click();
      attribute long tabIndex;
      void focus();
      void blur();
      attribute DOMString accessKey;
      attribute boolean draggable;
      [PutForwards=value] readonly attribute DOMTokenList dropzone;
      attribute HTMLMenuElement? contextMenu;
      attribute boolean spellcheck;
      void forceSpellCheck();
    };
    HTMLElement implements GlobalEventHandlers;
    HTMLElement implements DocumentAndElementEventHandlers;
    HTMLElement implements ElementContentEditable;
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLUnknownElement">
    interface HTMLUnknownElement : HTMLElement { };
  </pre>

  The {{HTMLElement}} interface holds methods and attributes related to a number of
  disparate features, and the members of this interface are therefore described in various different
  sections of this specification.

  <div class="impl">
    The {{HTMLUnknownElement}} interface must be used for <a>html elements</a> that are not
    defined by this specification (or <a lt="applicable specification">other applicable specifications</a>).
  </div>

<h4 id="element-definitions">Element definitions</h4>

  Each element in this specification has a definition that includes the following information:

  : <dfn>Categories</dfn>
  :: A list of <a>categories</a> to which the element belongs. These are used when defining the
      <a>content models</a> for each element.
  : <dfn>Contexts in which this element can be used</dfn>
  :: A <em>non-normative</em> description of where the element can be used. This information is
      redundant with the content models of elements that allow this one as a child, and is provided
      only as a convenience.
      <p class="note">
        For simplicity, only the most specific expectations are listed. For example, an element that
        is both <a>flow content</a> and <a>phrasing content</a> can be used anywhere that either
        <a>flow content</a> or <a>phrasing content</a> is expected, but since anywhere that
        <a>flow content</a> is expected, <a>phrasing content</a> is also expected (since all
        <a>phrasing content</a> is <a>flow content</a>), only "where <a>phrasing content</a> is
        expected" will be listed.
      </p>
  : <dfn>Content model</dfn>
  :: A normative description of what content must be included as children and descendants of the
      element.
  : <dfn>Tag omission in text/html</dfn>
  :: A <em>non-normative</em> description of whether, in the <a href="#text-html"><code>text/html</code></a> syntax, the
      <a lt="start tag">start</a> and <a lt="end tag">end</a> tags can be omitted. This information is redundant with the
      normative requirements given in the <a lt="omitted">optional tags</a> section, and is provided in the
      element definitions only as a convenience.
  : <dfn lt="content attribute|content attributes">Content attributes</dfn>
  :: A normative list of attributes that may be specified on the element (except where otherwise
      disallowed), along with non-normative descriptions of those attributes. (The content to the
      left of the dash is normative, the content to the right of the dash is not.)
  : Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values
  :: A normative list of <a href="#aria-role-attribute">ARIA role attribute</a> values that may be specified on the element
      (except where otherwise disallowed). Each value is linked to a non normative description.
  : Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>
  :: Links to the <a>Global aria-* attributes</a> list and the
      <a href="#allowed-aria-roles-states-and-properties">allowed roles, states and properties</a> table.
  : <dfn>DOM interface</dfn>
  :: A normative definition of a DOM interface that such elements must implement.

  This is then followed by a description of what the element <a>represents</a>, along with any
  additional normative conformance criteria that may apply to authors
  <span class="impl"> and implementations</span>. Examples are sometimes also included.

<h5 id="element-definitions-attributes">Attributes</h5>

  Except where otherwise specified, attributes on <a>html elements</a> may have any string value,
  including the empty string. Except where explicitly stated, there is no restriction on what text
  can be specified in such attributes.

<h4 id="content-models">Content models</h4>

  Each element defined in this specification has a content model: a description of the element's
  expected <a lt='html-contents'>contents</a>. An <a>HTML element</a> must have contents that match the requirements
  described in the element's content model. The <dfn lt='html-contents'>contents</dfn> of an element are its children
  in the DOM, except for <{template}> elements, where the children are those in the
  <a>template contents</a> (a separate <code>DocumentFragment</code> assigned to the element when
  the element is created).

  The <a>space characters</a> are always allowed between elements. User agents represent these
  characters between elements in the source markup as <code>Text</code> nodes in the DOM. Empty
  <code>Text</code> nodes and <code>Text</code> nodes consisting of just sequences of those
  characters are considered <dfn>inter-element whitespace</dfn>.

  <a>Inter-element whitespace</a>, comment nodes, and processing instruction nodes must be ignored
  when establishing whether an element's contents match the element's content model or not, and must
  be ignored when following algorithms that define document and element semantics.

  <p class="note">
    Thus, an element <var>A</var> is said to be <i>preceded or followed</i> by a second element
    <var>B</var> if <var>A</var> and <var>B</var> have the same parent node and there are no other
    element nodes or <code>Text</code> nodes (other than <a>inter-element whitespace</a>) between
    them. Similarly, a node is the <i>only child</i> of an element if that element contains no other
    nodes other than <a>inter-element whitespace</a>, comment nodes, and processing instruction
    nodes.
  </p>

  Authors must not use <a>html elements</a> anywhere except where they are explicitly allowed, as
  defined for each element, or as explicitly required by other specifications. For XML compound
  documents, these contexts could be inside elements from other namespaces, if those elements are
  defined as providing the relevant contexts.

  <div class="example">
    For example, the Atom specification defines a <code>content</code> element. When its
    <code>type</code> attribute has the value <code>xhtml</code>, the Atom specification requires
    that it contain a single HTML <{div}> element. Thus, a <{div}> element is
    allowed in that context, even though this is not explicitly normatively stated by this
    specification. [[RFC4287]]
  </div>

  In addition, <a>html elements</a> may be orphan nodes (i.e., without a parent node).

  <div class="example">
    For example, creating a <{td}> element and storing it in a global variable in a
    script is conforming, even though <{td}> elements are otherwise only supposed to be
    used inside <{tr}> elements.

    <pre highlight="javascript">
      var data = {
        name: "Banana",
        cell: document.createElement('td'),
      };
    </pre>
  </div>

<h5 id="the-nothing-content-model">The "nothing" content model</h5>

  When an element's content model is <dfn>nothing</dfn>, the element must contain no
  <code>Text</code> nodes (other than <a>inter-element whitespace</a>) and no element nodes.

  <p class="note">
    Most HTML elements whose content model is "nothing" are also, for convenience,
    <a>void elements</a> (elements that have no <a>end tag</a> in the <a href="#syntax">HTML syntax</a>). However,
    these are entirely separate concepts.
  </p>

<h5 id="kinds-of-content">Kinds of content</h5>

  Each element in HTML falls into zero or more <dfn lt="content categories|conent category">categories</dfn> that group elements with
  similar characteristics together. The following broad categories are used in this specification:

  <ul class="brief category-list">
    <li>[[#kinds-of-content-metadata-content]]</li>
    <li>[[#kinds-of-content-flow-content]]</li>
    <li>[[#kinds-of-content-sectioning-content]]</li>
    <li>[[#kinds-of-content-heading-content]]</li>
    <li>[[#kinds-of-content-phrasing-content]]</li>
    <li>[[#kinds-of-content-embedded-content]]</li>
    <li>[[#kinds-of-content-interactive-content]]</li>
  </ul>

  <p class="note">
    Some elements also fall into other categories, which are defined in other parts of this
    specification.
  </p>

  These categories are related as follows:

  <object width="1000" height="288" data="images/content-venn.svg"><img src="images/content-venn.png" alt="" width="512" height="288" /></object>

  Sectioning content, heading content, phrasing content, embedded content, and interactive content
  are all types of flow content. Metadata is sometimes flow content. Metadata and interactive
  content are sometimes phrasing content. Embedded content is also a type of phrasing content, and
  sometimes is interactive content.

  Other categories are also used for specific purposes, e.g., form controls are specified using a
  number of categories to define common requirements. Some elements have unique requirements and do
  not fit into any particular category.

<h6 id="kinds-of-content-metadata-content">Metadata content</h6>

  <dfn lt="metadata content">Metadata content</dfn> is content that sets up the presentation or behavior of the rest of
  the content, or that sets up the relationship of the document with other documents, or that
  conveys other "out of band" information.

  <ul class="brief category-list">
    <li><{base}></li>
    <li><{link}></li>
    <li><{meta}></li>
    <li><{noscript}></li>
    <li><{script}></li>
    <li><{style}></li>
    <li><{template}></li>
    <li><a element for="html"><code>title</code></a></li>
  </ul>

<h6 id="kinds-of-content-flow-content">Flow content</h6>

  Most elements that are used in the body of documents and applications are categorized as
  <dfn lt="flow content">flow content</dfn>.

  <ul class="brief category-list">
    <li><{a}></li>
    <li><{abbr}></li>
    <li><{address}></li>
    <li><{area}> (if it is a descendant of a <{map}> element)</li>
    <li><{article}></li>
    <li><{aside}></li>
    <li><{audio}></li>
    <li><{b}></li>
    <li><{bdi}></li>
    <li><{bdo}></li>
    <li><{blockquote}></li>
    <li><{br}></li>
    <li><{button}></li>
    <li><{canvas}></li>
    <li><{cite}></li>
    <li><{code}></li>
    <li><{data}></li>
    <li><{datalist}></li>
    <li><{del}></li>
    <li><{details}></li>
    <li><{dfn}></li>
    <li><{div}></li>
    <li><{dl}></li>
    <li><{em}></li>
    <li><{embed}></li>
    <li><{fieldset}></li>
    <li><{figure}></li>
    <li><{footer}></li>
    <li><{form}></li>
    <li><{h1}></li>
    <li><{h2}></li>
    <li><{h3}></li>
    <li><{h4}></li>
    <li><{h5}></li>
    <li><{h6}></li>
    <li><{header}></li>
    <li><{hr}></li>
    <li><{i}></li>
    <li><{iframe}></li>
    <li><{img}></li>
    <li><{input}></li>
    <li><{ins}></li>
    <li><{kbd}></li>
    <li><{keygen}></li>
    <li><{label}></li>
    <li><{main}></li>
    <li><{map}></li>
    <li><{mark}></li>
    <li><{math}></li>
    <li><{menu}></li>
    <li><{meter}></li>
    <li><{nav}></li>
    <li><{noscript}></li>
    <li><{object}></li>
    <li><{ol}></li>
    <li><{output}></li>
    <li><{p}></li>
    <li><{picture}></li>
    <li><{pre}></li>
    <li><{progress}></li>
    <li><{q}></li>
    <li><{ruby}></li>
    <li><{s}></li>
    <li><{samp}></li>
    <li><{script}></li>
    <li><{section}></li>
    <li><{select}></li>
    <li><{small}></li>
    <li><{span}></li>
    <li><{strong}></li>
    <li><{sub}></li>
    <li><{sup}></li>
    <li><{svg}></li>
    <li><{table}></li>
    <li><{template}></li>
    <li><{textarea}></li>
    <li><{time}></li>
    <li><{u}></li>
    <li><{ul}></li>
    <li><{var}></li>
    <li><{video}></li>
    <li><{wbr}></li>
    <li><a>Text</a></li>
  </ul>


<h6 id="kinds-of-content-sectioning-content">Sectioning content</h6>

  <dfn lt="sectioning content">Sectioning content</dfn> is content that defines the scope of <a>headings</a> and
  <a element lt="footer">footers</a>.

  <ul class="brief category-list">
    <li><{article}></li>
    <li><{aside}></li>
    <li><{nav}></li>
    <li><{section}></li>
  </ul>

  Each <a>sectioning content</a> element potentially has a heading and an <a>outline</a>. See the
  section on [[#headings-and-sections]] for further details.

  <p class="note">
    There are also certain elements that are <a>sectioning roots</a>. These are distinct from
    <a>sectioning content</a>, but they can also have an <a>outline</a>.
  </p>

<h6 id="kinds-of-content-heading-content">Heading content</h6>

  <dfn lt="heading content|headings">Heading content</dfn> defines the header of a section (whether explicitly marked up using
  <a>sectioning content</a> elements, or implied by the heading content itself).

  <ul class="brief category-list">
    <li><{h1}></li>
    <li><{h2}></li>
    <li><{h3}></li>
    <li><{h4}></li>
    <li><{h5}></li>
    <li><{h6}></li>
  </ul>

<h6 id="kinds-of-content-phrasing-content">Phrasing content</h6>

  <dfn lt="phrasing content">Phrasing content</dfn> is the text of the document, as well as elements that mark up that
  text at the intra-paragraph level. Runs of <a>phrasing content</a> form <a>paragraphs</a>.

  <ul class="brief category-list">
    <li><{a}></li>
    <li><{abbr}></li>
    <li><{area}> (if it is a descendant of a <{map}> element)</li>
    <li><{audio}></li>
    <li><{b}></li>
    <li><{bdi}></li>
    <li><{bdo}></li>
    <li><{br}></li>
    <li><{button}></li>
    <li><{canvas}></li>
    <li><{cite}></li>
    <li><{code}></li>
    <li><{data}></li>
    <li><{datalist}></li>
    <li><{del}></li>
    <li><{dfn}></li>
    <li><{em}></li>
    <li><{embed}></li>
    <li><{i}></li>
    <li><{iframe}></li>
    <li><{img}></li>
    <li><{input}></li>
    <li><{ins}></li>
    <li><{kbd}></li>
    <li><{keygen}></li>
    <li><{label}></li>
    <li><{map}></li>
    <li><{mark}></li>
    <li><{math}></li>
    <li><{meter}></li>
    <li><{noscript}></li>
    <li><{object}></li>
    <li><{output}></li>
    <li><{picture}></li>
    <li><{progress}></li>
    <li><{q}></li>
    <li><{ruby}></li>
    <li><{s}></li>
    <li><{samp}></li>
    <li><{script}></li>
    <li><{select}></li>
    <li><{small}></li>
    <li><{span}></li>
    <li><{strong}></li>
    <li><{sub}></li>
    <li><{sup}></li>
    <li><{svg}></li>
    <li><{template}></li>
    <li><{textarea}></li>
    <li><{time}></li>
    <li><{u}></li>
    <li><{var}></li>
    <li><{video}></li>
    <li><{wbr}></li>
    <li><a>Text</a></li>
  </ul>

  <p class="note">
    Most elements that are categorized as phrasing content can only contain elements that are
    themselves categorized as phrasing content, not any flow content.
  </p>

  <dfn lt="Text|Text content">Text</dfn>, in the context of content models, means either nothing, or
  <code>Text</code> nodes. <a>Text</a> is sometimes used as a content model on its own, but is also
  <a>phrasing content</a>, and can be <a>inter-element whitespace</a> (if the <code>Text</code>
  nodes are empty or contain just <a>space characters</a>).

  <code>Text</code> nodes and attribute values must consist of <a>Unicode characters</a>, must not
  contain U+0000 characters, must not contain permanently undefined Unicode characters
  (noncharacters), and must not contain <a>control characters</a> other than
  <a>space characters</a>.

  This specification includes extra constraints on the exact value of <code>Text</code> nodes and
  attribute values depending on their precise context.

  For elements in HTML, the constraints of the <a>Text</a> <a>content model</a> also depends on the
  <a>kind of element</a>. For instance, an "<code>&lt;</code>" inside a <{textarea}> element does
  not need to be escaped in HTML because <{textarea}> is an <a>escapable raw text</a> element.
  (This does not apply to XHTML. In XHTML, the <a>kind of element</a> doesn't affect the constraints
  of <a>content model</a>: <a>Text</a>.)

<h6 id="kinds-of-content-embedded-content">Embedded content</h6>

  <dfn lt="embedded content">Embedded content</dfn> is content that imports another
  resource into the document, or content from another vocabulary that is <a for="document">inserted into the document</a>.

  <ul class="brief category-list">
    <li><{audio}></li>
    <li><{canvas}></li>
    <li><{embed}></li>
    <li><{iframe}></li>
    <li><{img}></li>
    <li><{math}></li>
    <li><{object}></li>
    <li><{picture}></li>
    <li><{svg}></li>
    <li><{video}></li>
  </ul>

  Elements that are from namespaces other than the <a>HTML namespace</a> and that convey content but
  not metadata, are <a>embedded content</a> for the purposes of the content models defined in this
  specification. (For example, MathML, or SVG.)

  Some embedded content elements can have <dfn>fallback content</dfn>: content that is to be used
  when the external resource cannot be used (e.g., because it is of an unsupported format). The
  element definitions state what the fallback is, if any.

<h6 id="kinds-of-content-interactive-content">Interactive content</h6>

  <dfn lt="interactive content">Interactive content</dfn> is content that is specifically intended
  for user interaction.

  <ul class="brief category-list">
    <li><{a}> (if the <{a/href}> attribute is present)</li>
    <li><{audio}> (if the <{audio/controls}> attribute is present)</li>
    <li><{button}></li>
    <li><{details}></li>
    <li><{embed}></li>
    <li><{iframe}></li>
    <li><{img}> (if the <{img/usemap}> attribute is present)</li>
    <li>
      <{input}> (if the <{input/type}> attribute is <em>not</em> in the <a>Hidden</a>
      state)
    </li>
    <li><{keygen}></li>
    <li><{label}></li>
    <li><{select}></li>
    <li><{textarea}></li>
    <li><{video}> (if the <{video/controls}> attribute is present)</li>
  </ul>

  The <code>tabindex</code> attribute can also make any element into <a>interactive content</a>.

<h6 id="sec-palpable-content">Palpable content</h6>

  As a general rule, elements whose content model allows any <a>flow content</a> or
  <a>phrasing content</a> should have at least one node in its <a lt='html-contents'>contents</a> that is
  <a>palpable content</a> and that does not have the <code>hidden</code> attribute specified.

  <p class="note">
    <dfn lt="palpable content">Palpable content</dfn> makes an element non-empty by providing either some descendant non-empty
    <a>text</a>, or else something users can hear (<{audio}> elements) or view
    (<{video}> or <{img}> or <{canvas}> elements) or otherwise interact
    with (for example, interactive form controls).
  </p>

  This requirement is not a hard requirement, however, as there are many cases where an element can
  be empty legitimately, for example when it is used as a placeholder which will later be filled in
  by a script, or when the element is part of a template and would on most pages be filled in but on
  some pages is not relevant.

  Conformance checkers are encouraged to provide a mechanism for authors to find elements that fail
  to fulfill this requirement, as an authoring aid.

  The following elements are palpable content:

  <ul class="brief category-list">
    <li><{a}></li>
    <li><{abbr}></li>
    <li><{address}></li>
    <li><{article}></li>
    <li><{aside}></li>
    <li><{audio}> (if the <code>controls</code> attribute is present)</li>
    <li><{b}></li>
    <li><{bdi}></li>
    <li><{bdo}></li>
    <li><{blockquote}></li>
    <li><{button}></li>
    <li><{canvas}></li>
    <li><{cite}></li>
    <li><{code}></li>
    <li><{data}></li>
    <li><{details}></li>
    <li><{dfn}></li>
    <li><{div}></li>
    <li><{dl}> (if the element's children include at least one name-value group)</li>
    <li><{em}></li>
    <li><{embed}></li>
    <li><{fieldset}></li>
    <li><{figure}></li>
    <li><{footer}></li>
    <li><{form}></li>
    <li><{h1}></li>
    <li><{h2}></li>
    <li><{h3}></li>
    <li><{h4}></li>
    <li><{h5}></li>
    <li><{h6}></li>
    <li><{header}></li>
    <li><{i}></li>
    <li><{iframe}></li>
    <li><{img}></li>
    <li>
      <{input}> (if the <code>type</code> attribute is <em>not</em> in the <a element-state for="input">Hidden</a>
      state)
    </li>
    <li><{ins}></li>
    <li><{kbd}></li>
    <li><{keygen}></li>
    <li><{label}></li>
    <li><{main}></li>
    <li><{map}></li>
    <li><{mark}></li>
    <li><{math}></li>
    <li><{meter}></li>
    <li><{nav}></li>
    <li><{object}></li>
    <li>
      <{ol}> (if the element's children include at least one <{li}> element)
    </li>
    <li><{output}></li>
    <li><{p}></li>
    <li><{pre}></li>
    <li><{progress}></li>
    <li><{q}></li>
    <li><{ruby}></li>
    <li><{s}></li>
    <li><{samp}></li>
    <li><{section}></li>
    <li><{select}></li>
    <li><{small}></li>
    <li><{span}></li>
    <li><{strong}></li>
    <li><{sub}></li>
    <li><{sup}></li>
    <li><{svg}></li>
    <li><{table}></li>
    <li><{textarea}></li>
    <li><{time}></li>
    <li><{u}></li>
    <li>
      <{ul}> (if the element's children include at least one <{li}> element)
    </li>
    <li><{var}></li>
    <li><{video}></li>
    <li><a>Text</a> that is not <a>inter-element whitespace</a></li>
  </ul>

<h6 id="sec-script-supporting-elements">Script-supporting elements</h6>

  <dfn lt="Script-supporting element|Script-supporting elements">Script-supporting elements</dfn> are those that do not <a>represent</a> anything themselves
  (i.e., they are not rendered), but are used to support scripts, e.g., to provide functionality for
  the user.

  The following elements are script-supporting elements:

  <ul class="brief category-list">
    <li><{script}></li>
    <li><{template}></li>
  </ul>

<h5 id="transparent-content-models">Transparent content models</h5>

  Some elements are described as <dfn>transparent</dfn>; they have "transparent" in the description
  of their content model. The content model of a <a>transparent</a> element is derived from the
  content model of its parent element: the elements required in the part of the content model that
  is "transparent" are the same elements as required in the part of the content model of the parent
  of the transparent element in which the transparent element finds itself.

  <div class="example">
    For instance, an <{ins}> element inside a <{ruby}> element cannot contain an
    <{rt}> element, because the part of the <{ruby}> element's content model that
    allows <{ins}> elements is the part that allows <a>phrasing content</a>, and the
    <{rt}> element is not <a>phrasing content</a>.
  </div>

  <p class="note">
    In some cases, where transparent elements are nested in each other, the process has to be
    applied iteratively.
  </p>

  <div class="example">
    Consider the following markup fragment:

    <pre highlight="html">&lt;p>&lt;object>&lt;param>&lt;ins>&lt;map>&lt;a href="/">Apples&lt;/a>&lt;/map>&lt;/ins>&lt;/object>&lt;/p></pre>

    To check whether "Apples" is allowed inside the <{a}> element, the content models are
    examined. The <{a}> element's content model is transparent, as is the <{map}>
    element's, as is the <{ins}> element's, as is the part of the <{object}>
    element's in which the <{ins}> element is found. The <{object}> element is
    found in the <{p}> element, whose content model is <a>phrasing content</a>. Thus,
    "Apples" is allowed, as text is phrasing content.
  </div>

  When a transparent element has no parent, then the part of its content model that is "transparent"
  must instead be treated as accepting any <a>flow content</a>.

<h5 id="paragraphs">Paragraphs</h5>

  <p class="note">
    The term <a>paragraph</a> as defined in this section is used for more than just the definition
    of the <{p}> element. The <a>paragraph</a> concept defined here is used to describe how
    to interpret documents. The <{p}> element is merely one of several ways of marking up a
    <a>paragraph</a>.
  </p>

  A <dfn lt="paragraph|paragraphs|implied paragraph|paragraphing|implied|implied paragraphs">paragraph</dfn> is typically a run of <a>phrasing content</a> that forms a block of text
  with one or more sentences that discuss a particular topic, as in typography, but can also be used
  for more general thematic grouping. For instance, an address is also a paragraph, as is a part of
  a form, a byline, or a stanza in a poem.

  <div class="example">
    In the following example, there are two paragraphs in a section. There is also a heading,
    which contains phrasing content that is not a paragraph. Note how the comments and
    <a>inter-element whitespace</a> do not form paragraphs.

    <pre highlight="html">
      &lt;section>
        &lt;h2>Example of paragraphs&lt;/h2>
        This is the &lt;em>first&lt;/em> paragraph in this example.
        &lt;p>This is the second.&lt;/p>
        &lt;!-- This is not a paragraph. -->
      &lt;/section>
    </pre>
  </div>

  Paragraphs in <a>flow content</a> are defined relative to what the document looks like without the
  <{a}>, <{ins}>, <{del}>, and <{map}> elements complicating
  matters, since those elements, with their hybrid content models, can straddle paragraph
  boundaries, as shown in the first two examples below.

  <p class="note">
    Generally, having elements straddle paragraph boundaries is best avoided. Maintaining such
    markup can be difficult.
  </p>

  <div class="example">
    The following example takes the markup from the earlier example and puts <{ins}> and
    <{del}> elements around some of the markup to show that the text was changed (though in
    this case, the changes admittedly don't make much sense). Notice how this example has exactly
    the same paragraphs as the previous one, despite the <{ins}> and <{del}>
    elements &mdash; the <{ins}> element straddles the heading and the first paragraph, and
    the <{del}> element straddles the boundary between the two paragraphs.

    <pre highlight="html">
      &lt;section>
        &lt;ins>&lt;h1>Example of paragraphs&lt;/h1>
        This is the &lt;em>first&lt;/em> paragraph in&lt;/ins> this example&lt;del>.
        &lt;p>This is the second.&lt;/p>&lt;/del>
        &lt;!-- This is not a paragraph. -->
      &lt;/section>
    </pre>
  </div>

  <div class="impl">
    Let <var>view</var> be a view of the DOM that replaces all <{a}>, <{ins}>,
    <{del}>, and <{map}> elements in the document with their
    <a lt='html-contents'>contents</a>. Then, in <var>view</var>, for each run of sibling <a>phrasing content</a>
    nodes uninterrupted by other types of content, in an element that accepts content other than
    <a>phrasing content</a> as well as <a>phrasing content</a>, let <var>first</var> be the first
    node of the run, and let <var>last</var> be the last node of the run. For each such run that
    consists of at least one node that is neither <a>embedded content</a> nor
    <a>inter-element whitespace</a>, a paragraph exists in the original DOM from immediately before
    <var>first</var> to immediately after <var>last</var>. (Paragraphs can thus span across
    <{a}>, <{ins}>, <{del}>, and <{map}> elements.)

    Conformance checkers may warn authors of cases where they have paragraphs that overlap each
    other (this can happen with <{object}>, <{video}>, <{audio}>, and
    <{canvas}> elements, and indirectly through elements in other namespaces that allow
    HTML to be further embedded therein, like <{svg}> or <{math}>).
  </div>

  A <a>paragraph</a> is also formed explicitly by <{p}> elements.

  <p class="note">
    The <{p}> element can be used to wrap individual paragraphs when there would otherwise
    not be any content other than phrasing content to separate the paragraphs from each other.
  </p>

  <div class="example">
    In the following example, the link spans half of the first paragraph, all of the heading
    separating the two paragraphs, and half of the second paragraph. It straddles the paragraphs and
    the heading.

    <pre highlight="html">
      &lt;header>
        Welcome!
        &lt;a href="about.html">
          This is home of...
          &lt;h1>The Falcons!&lt;/h1>
          The Lockheed Martin multirole jet fighter aircraft!
        &lt;/a>
        This page discusses the F-16 Fighting Falcon's innermost secrets.
      &lt;/header>
    </pre>

    Here is another way of marking this up, this time showing the paragraphs explicitly, and
    splitting the one link element into three:

    <pre highlight="html">
      &lt;header>
        &lt;p>Welcome! &lt;a href="about.html">This is home of...&lt;/a>&lt;/p>
        &lt;h1>&lt;a href="about.html">The Falcons!&lt;/a>&lt;/h1>
        &lt;p>&lt;a href="about.html">The Lockheed Martin multirole jet
        fighter aircraft!&lt;/a> This page discusses the F-16 Fighting
        Falcon's innermost secrets.&lt;/p>
      &lt;/header>
    </pre>
  </div>

  <div class="example">
    It is possible for paragraphs to overlap when using certain elements that define fallback
    content. For example, in the following section:

    <pre highlight="html">
      &lt;section>
        &lt;h2>My Cats&lt;/h2>
        You can play with my cat simulator.
        &lt;object data="cats.sim">
          To see the cat simulator, use one of the following links:
          &lt;ul>
            &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
            &lt;li>&lt;a href="https://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
          &lt;/ul>
          Alternatively, upgrade to the Mellblom Browser.
        &lt;/object>
        I'm quite proud of it.
      &lt;/section>
    </pre>

    There are five paragraphs:

    1. The paragraph that says "You can play with my cat simulator. <i>object</i> I'm quite proud of
        it.", where <i>object</i> is the <{object}> element.
    2. The paragraph that says "To see the cat simulator, use one of the following links:".
    3. The paragraph that says "Download simulator file".
    4. The paragraph that says "Use online simulator".
    5. The paragraph that says "Alternatively, upgrade to the Mellblom Browser.".

    The first paragraph is overlapped by the other four. A user agent that supports the "cats.sim"
    resource will only show the first one, but a user agent that shows the fallback will confusingly
    show the first sentence of the first paragraph as if it was in the same paragraph as the second
    one, and will show the last paragraph as if it was at the start of the second sentence of the
    first paragraph.

    To avoid this confusion, explicit <{p}> elements can be used. For example:

    <pre highlight="html">
      &lt;section>
        &lt;h2>My Cats&lt;/h2>
        &lt;p>You can play with my cat simulator.&lt;/p>
        &lt;object data="cats.sim">
          &lt;p>To see the cat simulator, use one of the following links:&lt;/p>
          &lt;ul>
            &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
            &lt;li>&lt;a href="https://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
          &lt;/ul>
          &lt;p>Alternatively, upgrade to the Mellblom Browser.&lt;/p>
        &lt;/object>
        &lt;p>I'm quite proud of it.&lt;/p>
      &lt;/section>
    </pre>
  </div>


<h4 id="sec-global-attributes"><dfn>Global attributes</dfn></h4>

  The following attributes are common to and may be specified on all <a>html elements</a>
  <span class="impl"> (even those not defined in this specification)</span>:

  * <{global/accesskey}>
  * <code>class</code>
  * <{global/contenteditable}>
  * <{global/contextmenu}>
  * <{global/dir}>
  * <{global/draggable}>
  * <{global/dropzone}>
  * <code>hidden</code>
  * <{global/id}>
  * <{global/lang}>
  * <code>spellcheck</code>
  * <code>style</code>
  * <code>tabindex</code>
  * <{global/title}>
  * <code>translate</code>

  <div class="impl">
  These attributes are only defined by this specification as attributes for <a>HTML elements</a>. When this specification refers to elements having these attributes, elements from
  namespaces that are not defined as having these attributes must not be considered as being
  elements with these attributes.

  <div class="example">
    For example, in the following XML fragment, the "<code>bogus</code>" element does not have a
    <{global/dir}> attribute as defined in this specification, despite having an attribute with
    the literal name "<{global/dir}>". Thus, <a>the directionality</a> of the inner-most
    <{span}> element is &quot;<a attr-value for="global/dir"><code>rtl</code></a>&quot;, inherited from the <{div}> element
    indirectly through the "<code>bogus</code>" element.

    <pre class="bad">
      &lt;div xmlns="https://www.w3.org/1999/xhtml" dir="rtl">
        &lt;bogus xmlns="https://example.net/ns" dir="ltr">
          &lt;span xmlns="https://www.w3.org/1999/xhtml">
          &lt;/span>
        &lt;/bogus>
      &lt;/div>
    </pre>
  </div>

  </div>

  <hr />

  To enable assistive technology products to expose a more fine-grained interface than is otherwise
  possible with HTML elements and attributes, a set of
  annotations for assistive technology products can be specified (the ARIA <code>role</code>
  and <code>aria-*</code> attributes). [[!WAI-ARIA]]

  <hr />

  The following <a>event handler content attributes</a> may be specified on any <a>HTML element</a>:

  * <code>onabort</code>
  * <code>onblur</code>*
  * <code>oncancel</code>
  * <code>oncanplay</code>
  * <code>oncanplaythrough</code>
  * <code>onchange</code>
  * <code>onclick</code>
  * <code>onclose</code>
  * <code>oncontextmenu</code>
  * <code>oncopy</code>
  * <code>oncuechange</code>
  * <code>oncut</code>
  * <code>ondblclick</code>
  * <code>ondrag</code>
  * <code>ondragend</code>
  * <code>ondragenter</code>
  * <code>ondragexit</code>
  * <code>ondragleave</code>
  * <code>ondragover</code>
  * <code>ondragstart</code>
  * <code>ondrop</code>
  * <code>ondurationchange</code>
  * <code>onemptied</code>
  * <code>onended</code>
  * <code>onerror</code>*
  * <code>onfocus</code>*
  * <code>oninput</code>
  * <code>oninvalid</code>
  * <code>onkeydown</code>
  * <code>onkeypress</code>
  * <code>onkeyup</code>
  * <code>onload</code>*
  * <code>onloadeddata</code>
  * <code>onloadedmetadata</code>
  * <code>onloadstart</code>
  * <code>onmousedown</code>
  * <code>onmouseenter</code>
  * <code>onmouseleave</code>
  * <code>onmousemove</code>
  * <code>onmouseout</code>
  * <code>onmouseover</code>
  * <code>onmouseup</code>
  * <code>onwheel</code>
  * <code>onpaste</code>
  * <code>onpause</code>
  * <code>onplay</code>
  * <code>onplaying</code>
  * <code>onprogress</code>
  * <code>onratechange</code>
  * <code>onreset</code>
  * <code>onresize</code>*
  * <code>onscroll</code>*
  * <code>onseeked</code>
  * <code>onseeking</code>
  * <code>onselect</code>
  * <code>onshow</code>
  * <code>onstalled</code>
  * <code>onsubmit</code>
  * <code>onsuspend</code>
  * <code>ontimeupdate</code>
  * <code>ontoggle</code>
  * <code>onvolumechange</code>
  * <code>onwaiting</code>

  <p class="note">
    The attributes marked with an asterisk have a different meaning when specified on
    <{body}> elements as those elements expose <a>event handlers</a> of the
    <code>Window</code> object with the same names.
  </p>

  <p class="note">
    While these attributes apply to all elements, they are not useful on all elements. For example,
    only <a>media elements</a> will ever receive a
    <a event for="media"><code>volumechange</code></a> event fired by the user agent.
  </p>

  <hr />

  <a>Custom data attributes</a> (e.g., <code>data-foldername</code> or <code>data-msgid</code>) can
  be specified on any <a>HTML element</a>, to store custom data specific to the page.

  <hr />

  In <a>HTML documents</a>, elements in the <a>HTML namespace</a> may have an <code>xmlns</code>
  attribute specified, if, and only if, it has the exact value
  "<code>https://www.w3.org/1999/xhtml</code>". This does not apply to <a>XML documents</a>.

  <p class="note">
    In HTML, the <code>xmlns</code> attribute has absolutely no effect. It is basically a talisman.
    It is allowed merely to make migration to and from XHTML mildly easier. When parsed by an
    <a>HTML parser</a>, the attribute ends up in no namespace, not the
    "<code>https://www.w3.org/2000/xmlns/</code>" namespace like namespace declaration attributes in
    XML do.
  </p>

  <p class="note">
    In XML, an <code>xmlns</code> attribute is part of the namespace declaration mechanism, and an
    element cannot actually have an <code>xmlns</code> attribute in no namespace specified.
  </p>

  <hr />

  The XML specification also allows the use of the <code>xml:space</code> attribute in the
  <a>XML namespace</a> on any element in an <a>XML document</a>. This attribute has no effect on
  <a>html elements</a>, as the default behavior in HTML is to preserve whitespace. [[!XML]]

  <p class="note">
    There is no way to serialize the <code>xml:space</code> attribute on <a>html elements</a> in the
    <a href="#text-html"><code>text/html</code></a> syntax.
  </p>

<h5 id="the-id-attribute">The <dfn element-attr for="global"><code>id</code></dfn> attribute</h5>

  The <code>id</code> attribute specifies its element's <a lt="id">unique identifier (ID)</a>. [[!DOM]]

  The value must be unique amongst all the <a>IDs</a> in the element's <a>home subtree</a> and must
  contain at least one character. The value must not contain any <a>space characters</a>.

  <p class="note">
    There are no other restrictions on what form an ID can take; in particular, IDs can consist of
    just digits, start with a digit, start with an underscore, consist of just punctuation, etc.
  </p>

  <p class="note">
    An element's <a lt="id">unique identifier</a> can be used for a variety of purposes, most notably as a
    way to link to specific parts of a document using fragment identifiers, as a way to target an
    element when scripting, and as a way to style a specific element from CSS.
  </p>

  <div class="impl">
    Identifiers are opaque strings. Particular meanings should not be derived from the value of the
    <code>id</code> attribute.
  </div>

<h5 id="the-title-attribute">The <code>title</code> attribute</h5>

  The <dfn element-attr for="global,figure,div,img,textarea,meter"><code>title</code></dfn>
  attribute <a>represents</a> advisory information for the
  element, such as would be appropriate for a tooltip. On a link, this could be the title or a
  description of the target resource; on an image, it could be the image credit or a description of
  the image; on a paragraph, it could be a footnote or commentary on the text; on a citation, it
  could be further information about the source; on <a>interactive content</a>, it could be a label
  for, or instructions for, use of the element; and so forth. The value is text.

  <p class="note">
    Relying on the <code>title</code> attribute is currently discouraged as many user agents do not
    expose the attribute in an accessible manner as required by this specification (e.g., requiring a
    pointing device such as a mouse to cause a tooltip to appear, which excludes keyboard-only users
    and touch-only users, such as anyone with a modern phone or tablet).
  </p>

  If this attribute is omitted from an element, then it implies that the <code>title</code>
  attribute of the nearest ancestor <a>HTML element</a> with a <code>title</code> attribute set is
  also relevant to this element. Setting the attribute overrides this, explicitly stating that the
  advisory information of any ancestors is not relevant to this element. Setting the attribute to
  the empty string indicates that the element has no advisory information.

  If the <code>title</code> attribute's value contains U+000A LINE FEED (LF) characters, the content
  is split into multiple lines. Each U+000A LINE FEED (LF) character represents a line break.

  <div class="example">
    Caution is advised with respect to the use of newlines in <code>title</code> attributes.

    For instance, the following snippet actually defines an abbreviation's expansion
    <em>with a line break in it</em>:

    <pre class="bad" highlight="html">
      &lt;p>My logs show that there was some interest in &lt;abbr title="Hypertext
      Transport Protocol">HTTP&lt;/abbr> today.&lt;/p>
    </pre>
  </div>

  Some elements, such as <{link}>, <{abbr}>, and <{input}>, define
  additional semantics for the <code>title</code> attribute beyond the semantics described above.

  <div class="impl">
    The <dfn>advisory information</dfn> of an element is the value that the following algorithm
    returns, with the algorithm being aborted once a value is returned. When the algorithm returns
    the empty string, then there is no advisory information.

    1. If the element is a <{link}>, <{style}>, <{dfn}>,
        <{abbr}>, or <{menuitem}> element, then: if the element has a
        <code>title</code> attribute, return the value of that attribute, otherwise, return the
        empty string.
    2. Otherwise, if the element has a <code>title</code> attribute, then return its value.
    3. Otherwise, if the element has a parent element, then return the parent element's
        <a>advisory information</a>.
    4. Otherwise, return the empty string.

    User agents should inform the user when elements have <a>advisory information</a>, otherwise the
    information would not be discoverable.

    <hr />

    The <code>title</code> IDL attribute must <a>reflect</a> the <code>title</code>
    content attribute.
  </div>

<h5 id="the-lang-and-xmllang-attributes">
  The <{global/lang}> and <{xml/lang|xml:lang}> attributes
</h5>

  The <dfn element-attr for="global"><code>lang</code></dfn> attribute (in no namespace) specifies the primary language for
  the element's contents and for any of the element's attributes that contain text. Its value must
  be a valid BCP 47 language tag, or the empty string. Setting the attribute to the empty string
  indicates that the primary language is unknown. [[!BCP47]]

  The <dfn element-attr for="xml"><code>lang</code></dfn> attribute in the <a>XML namespace</a> is defined in XML. [[!XML]]

  If these attributes are omitted from an element, then the language of this element is the same as
  the language of its parent element, if any.

  The <{global/lang}> attribute in no namespace may be used on any <a>HTML element</a>.

  The <{global/lang}> attribute in the <a>XML namespace</a> may be used on
  <a>html elements</a> in <a>XML documents</a>, as well as elements in other namespaces if the
  relevant specifications allow it (in particular, MathML and SVG allow <{global/lang}>
  attributes in the <a>XML namespace</a> to be specified on their elements). If both the
  <{global/lang}> attribute in no namespace and the <{global/lang}> attribute in the
  <a>XML namespace</a> are specified on the same element, they must have exactly the same value
  when compared in an <a>ASCII case-insensitive</a> manner.

  Authors must not use the <{global/lang}> attribute in the <a>XML namespace</a> on
  <a>html elements</a> in <a>HTML documents</a>. To ease migration to and from XHTML, authors may
  specify an attribute in no namespace with no prefix and with the literal localname
  "<{xml/lang|xml:lang}>" on <a>html elements</a> in <a>HTML documents</a>, but such attributes must
  only be specified if a <{global/lang}> attribute in no namespace is also specified, and both
  attributes must have the same value when compared in an <a>ASCII case-insensitive</a> manner.

  <p class="note">
    The attribute in no namespace with no prefix and with the literal localname
    "<{xml/lang|xml:lang}>" has no effect on language processing.
  </p>

  <p class="warning" id="lang-warning">
  The language of <a>HTML documents</a> is indicated using a <{global/lang}> attribute (on the <{HTML}>
  element itself, to indicate the primary language of the document, and on individual elements,
  to indicate a change in language). It provides an explicit indication to user agents about the
  language of content, so an appropriate language dictionary can be used and, in the case of screen
  readers and similar assistive technologies with voice output, the content is pronounced using the
  correct voice / language library (where available). <strong>Setting of a language using the <{global/lang}>
  attribute which does not match the language of the document or document parts will result in some
  users being unable to understand the content</strong>.
  </p>

  <div class="impl">
    <hr />

    To determine the <dfn>language</dfn> of a node, user agents must look at the nearest ancestor
    element (including the element itself if the node is an element) that has a
    <{global/lang}> attribute in the <a>XML namespace</a> set or is an <a>HTML element</a>
    and has a <{global/lang}> in no namespace attribute set. That attribute specifies the language
    of the node (regardless of its value).

    If both the <{global/lang}> attribute in no namespace and the
    <{global/lang}> attribute in the <a>XML namespace</a> are set on an element, user
    agents must use the <{global/lang}> attribute in the <a>XML namespace</a>, and the
    <{global/lang}> attribute in no namespace must be <a>ignored</a> for the purposes of
    determining the element's language.

    If neither the node nor any of the node's ancestors, including the <a>root element</a>,
    have either attribute set, but there is a <a>pragma-set default language</a> set, then that
    is the language of the node. If there is no <a>pragma-set default language</a> set, then
    language information from a higher-level protocol (such as HTTP), if any, must be used as the
    final fallback language instead. In the absence of any such language information, and in cases
    where the higher-level protocol reports multiple languages, the language of the node is unknown,
    and the corresponding language tag is the empty string.

    <p class="example">
      For example, if a document is delivered over HTTP and the <code>Content-Language</code> HTTP
      header is specified with a value "<code>en</code>" (and there is no pragma-set default 
      language), then for any element in the document that does not itself have a <{global/lang}> 
      attribute nor any ancestor of that element, the fallback language for the element will be 
      English. If the value of the <code>Content-Language</code> header was 
      "<code>de, fr, it</code>" then the language of the node is unknown. 
      <a href="https://www.w3.org/International/questions/qa-http-and-lang">This article</a> 
      provides some additional guidance on the use of HTTP headers, and <{meta}> elements for 
      providing language information.
    </p>

    If the resulting value is not a recognized language tag, then it must be treated as an unknown
    language having the given language tag, distinct from all other languages. For the purposes of
    round-tripping or communicating with other services that expect language tags, user agents
    should pass unknown language tags through unmodified, and tagged as being BCP 47 language tags,
    so that subsequent services do not interpret the data as another type of language description.
    [[!BCP47]]

    <p class="example">
      Thus, for instance, an element with <code>lang="xyzzy"</code> would be matched by the selector
      <code>:lang(xyzzy)</code> (e.g., in CSS), but it would not be matched by
      <code>:lang(abcde)</code>, even though both are equally invalid. Similarly, if a Web browser
      and screen reader working in unison communicated about the language of the element, the
      browser would tell the screen reader that the language was "xyzzy", even if it knew it was
      invalid, just in case the screen reader actually supported a language with that tag after all.
      Even if the screen reader supported both BCP 47 and another syntax for encoding language
      names, and in that other syntax the string "xyzzy" was a way to denote the Belarusian
      language, it would be <em>incorrect</em> for the screen reader to then start treating text as
      Belarusian, because "xyzzy" is not how Belarusian is described in BCP 47 codes (BCP 47 uses
      the code "be" for Belarusian).
    </p>

    If the resulting value is the empty string, then it must be interpreted as meaning that the
    language of the node is explicitly unknown.

    <hr />

    User agents may use the element's language to determine proper processing or rendering (e.g., in
    the selection of appropriate fonts or pronunciations, for dictionary selection, or for the user
    interfaces of form controls such as date pickers).

    <hr />

    The <{global/lang}> IDL attribute must <a>reflect</a> the <{global/lang}> content
    attribute in no namespace.
  </div>

<h5 id="the-translate-attribute">The <code>translate</code> attribute</h5>

  The <dfn element-attr for="global"><code>translate</code></dfn> attribute is an <a>enumerated attribute</a> that is used to
  specify whether an element's attribute values and the values of its <code>Text</code> node
  children are to be translated when the page is localized, or whether to leave them unchanged.

  The attribute's keywords are the empty string, <code>yes</code>, and <code>no</code>. The empty
  string and the <code>yes</code> keyword map to the <i>yes</i> state. The <code>no</code> keyword
  maps to the <i>no</i> state. In addition, there is a third state, the <i>inherit</i> state, which
  is the <i>missing value default</i> (and the <i>invalid value default</i>).

  Each element (even non-HTML elements) has a <dfn>translation mode</dfn>, which is in either the
  <a>translate-enabled</a> state or the <a>no-translate</a> state. If an <a>HTML element</a>'s
  <code>translate</code> attribute is in the <i>yes</i> state, then the element's
  <a>translation mode</a> is in the <a>translate-enabled</a> state; otherwise, if the element's
  <code>translate</code> attribute is in the <i>no</i> state, then the element's
  <a>translation mode</a> is in the <a>no-translate</a> state. Otherwise, either the element's
  <code>translate</code> attribute is in the <i>inherit</i> state, or the element is not an
  <a>HTML element</a> and thus does not have a <code>translate</code> attribute; in either case, the
  element's <a>translation mode</a> is in the same state as its parent element's, if any, or in the
  <a>translate-enabled</a> state, if the element is a <a>root element</a>.

  When an element is in the <dfn>translate-enabled</dfn> state, the element's
  <a>translatable attributes</a> and the values of its <code>Text</code> node children are to be
  translated when the page is localized.

  When an element is in the <dfn>no-translate</dfn> state, the element's attribute values and the
  values of its <code>Text</code> node children are to be left as-is when the page is localized,
  e.g., because the element contains a person's name or a name of a computer program.

  The following attributes are <dfn>translatable attributes</dfn>:

  * <code>abbr</code> on <{th}> elements
  * <code>alt</code> on <{area}>, <{img}>, and <{input}> elements
  * <code>content</code> on <{meta}> elements, if the <code>name</code> attribute specifies
    a metadata name whose value is known to be translatable
  * <code>download</code> on <{a}> and <{area}> elements
  * <code>label</code> on <{menuitem}>, <{menu}>, <{optgroup}>,
    <{option}>, and <{track}> elements
  * <{global/lang}> on <a>html elements</a>; must be "translated" to match the language used in
    the translation
  * <code>placeholder</code> on <code>input</code> and <{textarea}> elements
  * <code>srcdoc</code> on <{iframe}> elements; must be parsed and recursively processed
  * <code>style</code> on <a>html elements</a>; must be parsed and recursively processed (e.g., for
    the values of &quot;content&quot; properties)
  * <code>title</code> on all <a>html elements</a>
  * <code>value</code> on <{input}> elements with a <{input/type}> attribute in the
    <a element-state for="input">Button</a>, <a element-state for="input">submit button</a>, or <a element-state for="input">reset button</a> state

  <div class="impl">
    <hr />

    The <code>translate</code> IDL attribute must, on getting, return true if the
    element's <a>translation mode</a> is <a>translate-enabled</a>, and false otherwise. On setting,
    it must set the content attribute's value to "<code>yes</code>" if the new value is true, and
    set the content attribute's value to "<code>no</code>" otherwise.
  </div>

  <div class="example">
    In this example, everything in the document is to be translated when the page is localized,
    except the sample keyboard input and sample program output:

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
      &lt;html> &lt;!-- default on the root element is translate=yes -->
        &lt;head>
          &lt;title>The Bee Game&lt;/title> &lt;!-- implied translate=yes inherited from ancestors -->
        &lt;/head>
        &lt;body>
          &lt;p>The Bee Game is a text adventure game in English.&lt;/p>
          &lt;p>When the game launches, the first thing you should do is type
            &lt;kbd translate=no>eat honey&lt;/kbd>. The game will respond with:&lt;/p>
        &lt;pre>&lt;samp translate=no>Yum yum! That was some good honey!&lt;/samp>&lt;/pre>
        &lt;/body>
      &lt;/html>
    </pre>
  </div>

<h5 id="the-xmlbase-attribute-xml-only">The <dfn element for="global"><code>xml:base</code></dfn> attribute (XML only)</h5>

  The <code>xml:base</code> attribute is defined in XML Base. [[!XMLBASE]]

  The <code>xml:base</code> attribute may be used on <a>html elements</a> of <a>XML documents</a>.
  Authors must not use the <code>xml:base</code> attribute on <a>html elements</a> in
  <a>HTML documents</a>.

<h5 id="the-dir-attribute">The <code>dir</code> attribute</h5>

  The <dfn element-attr for="global"><code>dir</code></dfn> attribute specifies the element's text directionality. The attribute is an
  <a>enumerated attribute</a> with the following keywords and states:

  : The <dfn attr-value for="global/dir"><code>ltr</code></dfn> keyword, which maps to the <dfn state for="dir">ltr</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated left-to-right
      text.
  : The <dfn attr-value for="global/dir"><code>rtl</code></dfn> keyword, which maps to the <dfn state for="dir">rtl</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated right-to-left
      text.
  : The <dfn attr-value for="global/dir"><code>auto</code></dfn> keyword, which maps to the <dfn state for="dir">auto</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated text, but that
      the direction is to be determined programmatically using the contents of the element (as
      described below).

      <p class="note">
        The heuristic used by this state is very crude (it just looks at the first character with a
        strong directionality, in a manner analogous to the Paragraph Level determination in the
        bidirectional algorithm). Authors are urged to only use this value as a last resort when the
        direction of the text is truly unknown and no better server-side heuristic can be applied.
        [[!BIDI]]
      </p>

      <p class="note">
        For <code>textarea</code> and <{pre}> elements, the heuristic is applied on a
        per-paragraph level.
      </p>

  The attribute has no <i>invalid value default</i> and no <i>missing value default</i>.

  <hr />

  <dfn lt="directionality|the directionality|the element's directionality">The directionality</dfn> of an element (any element, not just an <a>HTML element</a>) is
  either &quot;<a attr-value for="global/dir"><code>ltr</code></a>&quot; or &quot;<a attr-value for="global/dir"><code>rtl</code></a>&quot;, and is determined as per the first appropriate set of
  steps from the following list:

  <dl class="switch">
    <dt>If the element's <{global/dir}> attribute is in the <a state for="dir">ltr</a> state</dt>
    <dt>
      If the element is a <a>root element</a> and the <{global/dir}> attribute is not in a defined
      state (i.e., it is not present or has an invalid value)
    </dt>
    <dt>
      If the element is an <{input}> element whose <code>type</code> attribute is in the
      <a element-state for="input">Telephone</a> state, and the <{global/dir}> attribute is not in a defined state (i.e., it
      is not present or has an invalid value)
    </dt>
    <dd><a>The directionality</a> of the element is &quot;<a state for="dir">ltr</a>&quot;.</dd>

    <dt>If the element's <{global/dir}> attribute is in the <a attr-value for="global/dir"><code>rtl</code></a> state</dt>
    <dd><a>The directionality</a> of the element is &quot;<a state for="dir">rtl</a>&quot;.</dd>

    <dt>
      If the element is an <{input}> element whose <code>type</code> attribute is in the
      <a element-state for="input">Text</a>, <a element-state for="input">Search</a>, <a element-state for="input">Telephone</a>, <a element-state for="input">URL</a>, or <a element-state for="input">E-mail</a> state, and the
      <{global/dir}> attribute is in the <a state for="dir">auto</a> state
    </dt>
    <dt>
      If the element is a <{textarea}> element and the <{global/dir}> attribute is in the
      <a state for="dir">auto</a> state
    </dt>
    <dd>
      If the element's <a lt="attribute value">value</a> contains a character of bidirectional character type AL or R,
      and there is no character of bidirectional character type L anywhere before it in the
      element's <a lt="attribute value">value</a>, then <a>the directionality</a> of the element is &quot;<a state for="dir">rtl</a>&quot;.
      [[!BIDI]]

      Otherwise, if the element's <a lt="attribute value">value</a> is not the empty string, or if the element is a
      <a>root element</a>, <a>the directionality</a> of the element is &quot;<a state for="dir">ltr</a>&quot;.

      Otherwise, <a>the directionality</a> of the element is the same as the element's parent
      element's <a>directionality</a>.
    </dd>

    <dt>If the element's <{global/dir}> attribute is in the <a state for="dir">auto</a> state</dt>
    <dt>
      If the element is a <{bdi}> element and the <{global/dir}> attribute is not in a
      defined state (i.e., it is not present or has an invalid value)
    </dt>
    <dd>
      Find the first character in <a>tree order</a> that matches the following criteria:

      * The character is from a <code>Text</code> node that is a descendant of the element whose
        <a>directionality</a> is being determined.
      * The character is of bidirectional character type L, AL, or R. [[!BIDI]]
      * The character is not in a <code>Text</code> node that has an ancestor element that is a
        descendant of the element whose <a>directionality</a> is being determined and that is
        either:
        * A <{bdi}> element.
        * A <{script}> element.
        * A <{style}> element.
        * A <{textarea}> element.
        * An element with a <{global/dir}> attribute in a defined state.

      If such a character is found and it is of bidirectional character type AL or R,
      <a>the directionality</a> of the element is &quot;<a state for="dir">rtl</a>&quot;.

      If such a character is found and it is of bidirectional character type L,
      <a>the directionality</a> of the element is &quot;<a state for="dir">ltr</a>&quot;.

      Otherwise, if the element is a <a>root element</a>, <a>the directionality</a> of the element
      is &quot;<a state for="dir">ltr</a>&quot;.

      Otherwise, <a>the directionality</a> of the element the same as the element's parent element's
      <a>directionality</a>.
    </dd>

    <dt>
      If the element has a parent element and the <{global/dir}> attribute is not in a defined
      state (i.e., it is not present or has an invalid value)
    </dt>
    <dd>
      <a>The directionality</a> of the element is the same as the element's parent element's
      <a>directionality</a>.
    </dd>
  </dl>

  <p class="note">
    Since the <{global/dir}> attribute is only defined for <a>html elements</a>, it cannot be
    present on elements from other namespaces. Thus, elements from other namespaces always just
    inherit their <a>directionality</a> from their parent element, or, if they don't have one,
    default to &quot;<a attr-value for="global/dir"><code>ltr</code></a>&quot;.
  </p>

  <div class="impl">
    <p class="note">
      This attribute <a href="#bidireq">has rendering requirements involving the bidirectional algorithm</a>.
    </p>
  </div>

  <hr />

  The <dfn lt="directionality of the attribute|directionality of an attribute">directionality of an attribute</dfn> of an <a>HTML element</a>, which is used when the
  text of that attribute is to be included in the rendering in some manner, is determined as per the
  first appropriate set of steps from the following list:

  <dl class="switch">
    <dt>
      If the attribute is a <a>directionality-capable attribute</a> and the element's
      <{global/dir}> attribute is in the <a state for="dir">auto</a> state
    </dt>
    <dd>
      Find the first character (in logical order) of the attribute's value that is of bidirectional
      character type L, AL, or R. [[!BIDI]]</a>

      If such a character is found and it is of bidirectional character type AL or R, the
      <a>directionality of the attribute</a> is &quot;<a attr-value for="global/dir"><code>rtl</code></a>&quot;.

      Otherwise, the <a>directionality of the attribute</a> is &quot;<a attr-value for="global/dir"><code>ltr</code></a>&quot;.
    </dd>

    <dt>Otherwise</dt>
    <dd>
      The <a>directionality of the attribute</a> is the same as <a>the element's directionality</a>.
    </dd>
  </dl>

  The following attributes are <dfn>directionality-capable attributes</dfn>:

  * <code>abbr</code> on <{th}> elements
  * <code>alt</code> on <{area}>, <{img}>, and <{input}> elements
  * <code>content</code> on <{meta}> elements, if the <code>name</code> attribute specifies
    a metadata name whose value is primarily intended to be human-readable rather than
    machine-readable
  * <code>label</code> on <{menuitem}>, <{menu}>, <{optgroup}>,
    <{option}>, and <{track}> elements
  * <code>placeholder</code> on <{input}> and <{textarea}> elements
  * <code>title</code> on all <a>html elements</a>

  <hr />

  <dl class="domintro">
    <dt><var>document</var> . <code>dir</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the <{html}> element's <{global/dir}> attribute's value, if any.

      Can be set, to either "<a attr-value for="global/dir"><code>ltr</code></a>", "<a attr-value for="global/dir"><code>rtl</code></a>", or "<a attr-value for="global/dir"><code>auto</code></a>" to
      replace the <{html}> element's <{global/dir}> attribute's value.

      If there is no <{html}> element, returns the empty string and ignores new
      values.
    </dd>
  </dl>

  <div class="impl">
    The <code>dir</code> IDL attribute on an element must <a>reflect</a> the
    <{global/dir}> content attribute of that element, <a>limited to only known values</a>.

    The {{Document/dir}} IDL attribute on {{Document}} objects must
    <a>reflect</a> the <{global/dir}> content attribute of the <{html}> element,
    if any, <a>limited to only known values</a>. If there is no such element, then the attribute
    must return the empty string and do nothing on setting.
  </div>

  <p class="note">
    Authors are strongly encouraged to use the <{global/dir}> attribute to indicate text direction
    rather than using CSS, since that way their documents will continue to render correctly even in
    the absence of CSS (e.g., as interpreted by search engines).
  </p>

  <div class="example">
    This markup fragment is of an IM conversation.

    <pre highlight="html">
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> How do you write "What's your name?" in Arabic?&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> &#x645;&#x627; &#x627;&#x633;&#x645;&#x643;&#x61f;&lt;/p>
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> Thanks.&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> That's written "&#x634;&#x643;&#x631;&#x64b;&#x627;".&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> Do you know how to write "Please"?&lt;/p>
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> "&#x645;&#x646; &#x641;&#x636;&#x644;&#x643;", right?&lt;/p>
    </pre>

    Given a suitable style sheet and the default alignment styles for the <{p}> element,
    namely to align the text to the <i>start edge</i> of the paragraph, the resulting rendering could
    be as follows:

    <img src="images/im.png" alt="Each paragraph rendered as a separate block, with the paragraphs left-aligned except the second paragraph and the last one, which would  be right aligned, with the usernames ('Student' and 'Teacher' in this example) flush right, with a colon to their left, and the text first to the left of that." width="366" height="157" />

    As noted earlier, the <code>auto</code> value is not a panacea. The final paragraph in this
    example is misinterpreted as being right-to-left text, since it begins with an Arabic character,
    which causes the "right?" to be to the left of the Arabic text.
  </div>

<h5 id="classes">The <dfn element-attr for="global"><code>class</code></dfn> attribute</h5>

  Every <a>HTML element</a> may have a <code>class</code> attribute specified.

  The attribute, if specified, must have a value that is a <a>set of space-separated tokens</a>
  representing the various classes that the element belongs to.

  <div class="impl">
    The classes that an <a>HTML element</a> has assigned to it consists of all the classes returned
    when the value of the <code>class</code> attribute is <a lt="split a string on spaces">split on spaces</a>. (Duplicates are
    ignored.)
  </div>

  <p class="note">
    Assigning classes to an element affects class matching in selectors in CSS, the
    <code>getElementsByClassName()</code> method in the DOM, and other such features.
  </p>

  There are no additional restrictions on the tokens authors can use in the <code>class</code>
  attribute, but authors are encouraged to use values that describe the nature of the content,
  rather than values that describe the desired presentation of the content.

  <div class="impl">
    <hr />

    <p class="note">
      The {{className}} and {{classList}} IDL attributes,
      defined in the DOM specification, <a>reflect</a> the <code>class</code> content attribute.
      [[!DOM]]
    </p>
  </div>

  <h5 id="the-style-attribute">The <dfn element-attr for="global"><code>style</code></dfn> attribute</h5>

  <p class="warning">There are no known native implementations of blocking the <code>style</code> content attribute based on CSP3 directives. Therefore this feature should not be relied upon.</p>  
  
  All <a>html elements</a> may have the <code>style</code> content attribute set. This is a
  <a>CSS styling attribute</a> as defined by the CSS Styling Attribute Syntax specification.
  [[!CSS-STYLE-ATTR]]

    In user agents that support CSS, the attribute's value must be parsed when the attribute is
    added or has its value changed, according to the rules given for <a>CSS styling attributes</a>.
    [[!CSS-STYLE-ATTR]]

    However, if the
    <a>Should element's inline behavior be blocked by Content Security Policy?</a> algorithm returns
    "<code>Blocked</code>" when executed upon the
    attribute's element and "<code>style attribute</code>", then the style
    rules defined in the attribute's value must not be applied to the element. [[!CSP3]]

  Documents that use <{global/style}> attributes on any of their elements must still be
  comprehensible and usable if those attributes were removed.

  <p class="note">
    In particular, using the <{global/style}> attribute to hide and show content, or to convey
    meaning that is otherwise not included in the document, is non-conforming. (To hide and show
    content, use the <code>hidden</code> attribute.)
  </p>

  <hr />

  <dl class="domintro">
    <dt><var>element</var> . <code>style</code></dt>
    <dd>
      Returns a <code>CSSStyleDeclaration</code> object for the element's <{global/style}>
      attribute.
    </dd>
  </dl>

  <div class="impl">
    The <code>style</code> IDL attribute is defined in the CSS Object Model (CSSOM)
    specification. [[!CSSOM]]
  </div>

  <div class="example">
    In the following example, the words that refer to colors are marked up using the
    <{span}> element and the <code>style</code> attribute to make those words show up in
    the relevant colors in visual media.

    <pre highlight="html">
      &lt;p>My sweat suit is &lt;span style="color: green; background:
      transparent">green&lt;/span> and my eyes are &lt;span style="color: blue;
      background: transparent">blue&lt;/span>.&lt;/p>
    </pre>
  </div>

<h5 id="embedding-custom-non-visible-data-with-the-data-attributes"><dfn>Embedding custom non-visible data</dfn> with the <code>data-*</code> attributes</h5>

  A <dfn>custom data attribute</dfn> is an attribute in no namespace whose name starts with the
  string "<dfn element-attr for="global" lt="data-|data-*"><code>data-</code></dfn>", has at least one character after the hyphen, is
  <a>XML-compatible</a>, and contains no <a>uppercase ASCII letters</a>.

  <p class="note">
    All attribute names on <a>html elements</a> in <a>HTML documents</a> get ASCII-lowercased
    automatically, so the restriction on ASCII uppercase letters doesn't affect such documents.
  </p>

  <a>Custom data attributes</a> are intended to store custom data private to the page or
  application, for which there are no more appropriate attributes or elements.

  These attributes are not intended for use by software that is not known to the administrators of
  the site that uses the attributes. For generic extensions that are to be used by multiple
  independent tools, either this specification should be extended to provide the feature explicitly,
  or a technology like microdata should be used (with a standardized vocabulary).

  <div class="example">
    For instance, a site about music could annotate list items representing tracks in an album with
    custom data attributes containing the length of each track. This information could then be used
    by the site itself to allow the user to sort the list by track length, or to filter the list for
    tracks of certain lengths.

    <pre highlight="html">
      &lt;ol>
        &lt;li data-length="2m11s">Beyond The Sea&lt;/li>
        ...
      &lt;/ol>
    </pre>

    It would be inappropriate, however, for the user to use generic software not associated with
    that music site to search for tracks of a certain length by looking at this data.

    This is because these attributes are intended for use by the site's own scripts, and are not a
    generic extension mechanism for publicly-usable metadata.
  </div>

  <div class="example">
    Similarly, a page author could write markup that provides information for a translation tool
    that they are intending to use:

    <pre highlight="html">
      &lt;p>The third &lt;span data-mytrans-de="Anspruch">claim&lt;/span> covers the case of
      &lt;span translate="no">HTML&lt;/span> markup.&lt;/p>
    </pre>

    In this example, the "<code>data-mytrans-de</code>" attribute gives specific text for the
    MyTrans product to use when translating the phrase "claim" to German. However, the standard
    <code>translate</code> attribute is used to tell it that in all languages, "HTML" is to remain
    unchanged. When a standard attribute is available, there is no need for a
    <a>custom data attribute</a> to be used.
  </div>

  Every <a>HTML element</a> may have any number of <a>custom data attributes</a> specified, with any
  value.

  <hr />

  <dl class="domintro">
    <dt><var>element</var> . <code>dataset</code></dt>
    <dd>
      Returns a <code>DOMStringMap</code> object for the element's <code>data-*</code> attributes.

      Hyphenated names become camel-cased. For example, <code>data-foo-bar=""</code> becomes
      <code>element.dataset.fooBar</code>.
    </dd>

  </dl>

  <div class="impl">
    The {{HTMLElement/dataset}} IDL attribute provides convenient
    accessors for all the <code>data-*</code> attributes on an element. On
    getting, the <code>dataset</code> IDL attribute must return a
    <code>DOMStringMap</code> object, associated with the following algorithms, which expose these
    attributes on their element:

    : The algorithm for getting the list of name-value pairs
    :: 1. Let <var>list</var> be an empty list of name-value pairs.
        2. For each content attribute on the element whose first five characters are the string
            "<code>data-</code>" and whose remaining characters (if any) do not include any
            <a>uppercase ASCII letters</a>, in the order that those attributes are listed in the
            element's <a lt="element attribute">attribute list</a>, add a name-value pair to <var>list</var> whose name is
            the attribute's name with the first five characters removed and whose value is the
            attribute's value.
        3. For each name in <var>list</var>, for each U+002D HYPHEN-MINUS character (-) in the name
            that is followed by a <a>lowercase ASCII letter</a>, remove the U+002D HYPHEN-MINUS
            character (-) and replace the character that followed it by the same character
            <a>converted to ASCII uppercase</a>.
        4. Return <var>list</var>.

    : The algorithm for setting names to certain values
    :: 1. Let <var>name</var> be the name passed to the algorithm.
        2. Let <var>value</var> be the value passed to the algorithm.
        3. If <var>name</var> contains a U+002D HYPHEN-MINUS character (-) followed by a
            <a>lowercase ASCII letter</a>, throw a "{{SyntaxError}}" {{DOMException}} and abort
            these steps.
        4. For each <a>uppercase ASCII letter</a> in <var>name</var>, insert a U+002D HYPHEN-MINUS
            character (-) before the character and replace the character with the same character
            <a>converted to ASCII lowercase</a>.
        5. Insert the string <code>data-</code> at the front of <var>name</var>.
        6. Set the value of the attribute with the name <var>name</var>, to the value
            <var>value</var>, replacing any previous value if the attribute already existed. If
            <code>setAttribute()</code> would have thrown an exception when setting an attribute
            with the name <var>name</var>, then this must throw the same exception.

    : The algorithm for deleting names
    :: 1. Let <var>name</var> be the name passed to the algorithm.
        2. For each <a>uppercase ASCII letter</a> in <var>name</var>, insert a U+002D HYPHEN-MINUS
            character (-) before the character and replace the character with the same character
            <a>converted to ASCII lowercase</a>.
        3. Insert the string <code>data-</code> at the front of <var>name</var>.
        4. Remove the attribute with the name <var>name</var>, if such an attribute exists. Do
            nothing otherwise.

        <p class="note">
          This algorithm will only get invoked by the Web IDL specification for names that are given
          by the earlier algorithm for getting the list of name-value pairs. [[!WEBIDL]]
        </p>
  </div>

  <div class="example">
    If a Web page wanted an element to represent a space ship, e.g., as part of a game, it would have
    to use the <code>class</code> attribute along with <code>data-*</code> attributes:

    <pre highlight="html">
      &lt;div class="spaceship" data-ship-id="30">
        &lt;button class="fire" onclick="spaceships[this.parentNode.dataset.shipId].fire()">
          Fire
        &lt;/button>
      &lt;/div>
    </pre>

    Notice how the hyphenated attribute name becomes camel-cased in the API.
  </div>

  Authors should carefully design such extensions so that when the attributes are ignored and any
  associated CSS dropped, the page is still usable.

  <div class="impl">
    User agents must not derive any implementation behavior from these attributes or values.
    Specifications intended for user agents must not define these attributes to have any meaningful
    values.
  </div>

  JavaScript libraries may use the <a>custom data attributes</a>, as they are considered to be part
  of the page on which they are used. Authors of libraries that are reused by many authors are
  encouraged to include their name in the attribute names, to reduce the risk of clashes. Where it
  makes sense, library authors are also encouraged to make the exact name used in the attribute
  names customizable, so that libraries whose authors unknowingly picked the same name can be used
  on the same page, and so that multiple versions of a particular library can be used on the same
  page even when those versions are not mutually compatible.

  <div class="example">
    For example, a library called "DoQuery" could use attribute names like
    <code>data-doquery-range</code>, and a library called "jJo" could use attributes names like
    <code>data-jjo-range</code>. The jJo library could also provide an API to set which prefix to
    use (e.g., <code>J.setDataPrefix("j2")</code>, making the attributes have names like
    <code>data-j2-range</code>).
  </div>

<h4 id="requirements-relating-to-the-bidirectional-algorithm">
  Requirements relating to the bidirectional algorithm
</h4>

<h5 id="authoring-conformance-criteria-for-bidirectional-algorithm-formatting-characters">
  Authoring conformance criteria for bidirectional-algorithm formatting characters
</h5>

  <a>Text content</a> in <a>html elements</a> with <code>Text</code> nodes in their <a lt='html-contents'>contents</a>,
  and text in attributes of <a>html elements</a> that allow free-form text, may contain characters
  in the ranges U+202A to U+202E and U+2066 to U+2069 (the bidirectional-algorithm formatting
  characters). However, the use of these characters is restricted so that any embedding or overrides
  generated by these characters do not start and end with different parent elements, and so that all
  such embeddings and overrides are explicitly terminated by a U+202C POP DIRECTIONAL FORMATTING
  character. This helps reduce incidences of text being reused in a manner that has unforeseen
  effects on the bidirectional algorithm. [[!BIDI]]

  The aforementioned restrictions are defined by specifying that certain parts of documents form
  <a>bidirectional-algorithm formatting character ranges</a>, and then imposing a requirement on
  such ranges.

  The strings resulting from applying the following algorithm to an <a>HTML element</a>
  <var>element</var> are <a>bidirectional-algorithm formatting character ranges</a>:

  1. Let <var>output</var> be an empty list of strings.
  2. Let <var>string</var> be an empty string.
  3. Let <var>node</var> be the first child node of <var>element</var>, if any, or null otherwise.
  4. <i>Loop</i>: If <var>node</var> is null, jump to the step labeled <i>end</i>.
  5. Process <var>node</var> according to the first matching step from the following list:

      <dl class="switch">
        <dt>If <var>node</var> is a <code>Text</code> node</dt>
        <dd>Append the text data of <var>node</var> to <var>string</var>.</dd>

        <dt>If <var>node</var> is a <{br}> element</dt>
        <dt>
          If <var>node</var> is an <a>HTML element</a> that is <a>flow content</a> but that is not
          also <a>phrasing content</a>
        </dt>
        <dd>
          If <var>string</var> is not the empty string, push <var>string</var> onto
          <var>output</var>, and let <var>string</var> be empty string.
        </dd>

        <dt>Otherwise</dt>
        <dd>Do nothing.</dd>
      </dl>
  6. Let <var>node</var> be <var>node</var>'s next sibling, if any, or null otherwise.
  7. Jump to the step labeled <i>loop</i>.
  8. <i>End</i>: If <var>string</var> is not the empty string, push <var>string</var> onto
      <var>output</var>.
  9. Return <var>output</var> as the <a>bidirectional-algorithm formatting character ranges</a>.

  The value of a namespace-less attribute of an <a>HTML element</a> is a <a>bidirectional-algorithm
  formatting character range</a>.

  Any strings that, as described above, are
  <dfn>bidirectional-algorithm formatting character ranges</dfn> must match the <code>string</code>
  production in the following ABNF, the character set for which is Unicode. [[!ABNF]]

  <pre data-highlight="abnf">
    string        = *( plaintext ( embedding / override / isolation ) ) plaintext
    embedding     = ( lre / rle ) string pdf
    override      = ( lro / rlo ) string pdf
    isolation     = ( lri / rli / fsi ) string pdi
    lre           = %x202A ; U+202A LEFT-TO-RIGHT EMBEDDING
    rle           = %x202B ; U+202B RIGHT-TO-LEFT EMBEDDING
    lro           = %x202D ; U+202D LEFT-TO-RIGHT OVERRIDE
    rlo           = %x202E ; U+202E RIGHT-TO-LEFT OVERRIDE
    pdf           = %x202C ; U+202C POP DIRECTIONAL FORMATTING
    lri           = %x2066 ; U+2066 LEFT-TO-RIGHT ISOLATE
    rli           = %x2067 ; U+2067 RIGHT-TO-LEFT ISOLATE
    fsi           = %x2068 ; U+2068 FIRST STRONG ISOLATE
    pdi           = %x2069 ; U+2069 POP DIRECTIONAL ISOLATE
    plaintext     = *( %x0000-2029 / %x202F-2065 / %x206A-10FFFF )
                    ; any string with no bidirectional-algorithm formatting characters
  </pre>

  <p class="note">
    While the U+2069 POP DIRECTIONAL ISOLATE character implicitly also ends open embeddings and
    overrides, text that relies on this implicit scope closure is not conforming to this
    specification. All strings of embeddings, overrides, and isolations need to be explicitly
    terminated to conform to this section's requirements.
  </p>

  <p class="note">
    Authors are encouraged to use the <code>dir</code> attribute, the <{bdo}> element, and
    the <{bdi}> element, rather than maintaining the bidirectional-algorithm formatting
    characters manually. The bidirectional-algorithm formatting characters interact poorly with CSS.
</p>

  <div class="impl">
    <h5 id="user-agent-conformance-criteria">User agent conformance criteria</h5>

    User agents must implement the Unicode bidirectional algorithm to determine the proper ordering
    of characters when rendering documents and parts of documents. [[!BIDI]]

    The mapping of HTML to the Unicode bidirectional algorithm must be done in one of three ways.
    Either the user agent must implement CSS, including in particular the CSS 'unicode-bidi',
    'direction', and 'content' properties, and must have, in its user agent style sheet, the rules
    using those properties given in this specification's [[#rendering]] section, or,
    alternatively, the user agent must act as if it implemented just the aforementioned properties
    and had a user agent style sheet that included all the aforementioned rules, but without letting
    style sheets specified in documents override them, or, alternatively, the user agent must
    implement another styling language with equivalent semantics. [[CSS-WRITING-MODES-3]]
    [[CSS3-CONTENT]]

    <p id="bidireq">
      The following elements and attributes have requirements defined by the [[#rendering]]
      section that, due to the requirements in this section, are requirements on all user agents
      (not just those that <a>support the suggested default rendering</a>):
    </p>

    * <{global/dir}> attribute
    * <{bdi}> element
    * <{bdo}> element
    * <{br}> element
    * <{pre}> element
    * <{textarea}> element
    * <{wbr}> element
  </div>

  <section>
  <h4 id="wai-aria">WAI-ARIA and HTML Accessibility API Mappings</h4>
  <section>
  <h5 id='aria-authoring-requirements'>ARIA Authoring Requirements</h5>
  Authors may use the ARIA <code>role</code> and <code>aria-*</code> attributes on
  <a>HTML elements</a>, in accordance with the requirements described in the
  ARIA specifications, except where these conflict with the requirements specified in
  ARIA in HTML [[!html-aria]]. These exceptions are intended to prevent authors from making assistive technology
  products report nonsensical states that do not represent the actual state of the document. [[!WAI-ARIA]]

 <p class="note" id="aria-usage-note">
   <dfn lt="do not set"></dfn>In the majority of cases setting an ARIA <code>role</code> and/or
   <code>aria-*</code> attribute that matches the default implicit ARIA semantics is unnecessary and
   not recommended as these properties are already set by the browser.
 </p>

  <div class="note">
    <p>Authors are encouraged to make use of the following documents for guidance on using ARIA in
  HTML beyond that which is provided in this section:</p>
    <ul>
      <li><a href="https://w3c.github.io/aria-in-html/">Notes on Using ARIA in HTML</a> - A practical
    guide for developers on how to to add accessibility information to HTML elements using the
    Accessible Rich Internet Applications specification [[!WAI-ARIA]].</li>
      <li><a href="https://w3c.github.io/aria/practices/aria-practices.html">WAI-ARIA 1.1 Authoring Practices</a> -
    An author's guide to understanding and implementing Accessible Rich Internet Applications.</li>
    </ul>
  </div>
  </section>
  <section class="impl">
   <h5 id='aria-conformance-requirements'>Conformance Checker Implementation Requirements</h5>
  <p>Conformance checkers are required to implement document conformance requirements for use of the
  ARIA <code>role</code> and <code>aria-*</code> attributes on <a>HTML elements</a>
  , as defined in ARIA in HTML. [[!html-aria]] </p>
  </section>
  <section class="impl">
  <h5 id='user-agent-requirements'>User Agent Implementation Requirements</h5>
  <div>
    <p>User agents are required to implement ARIA semantics on all <a>HTML elements</a>
  , as defined in the ARIA  specifications [[!WAI-ARIA]] and
  <a href="https://w3c.github.io/aria/core-aam/core-aam.html">[core-aam-1.1]</a>. </p>
    <p>User agents are required to implement Accessibility API semantics on all
  <a>HTML elements</a>, as defined in the
  HTML Accessibility API Mappings specification <a href="https://w3c.github.io/aria/html-aam/html-aam.html">[html-aam-1.0]</a>.</p>
    <p>The ARIA attributes defined in the ARIA specifications do not have any effect on CSS
  pseudo-class matching, user interface modalities that don't use assistive technologies, or the
  default actions of user interaction events as described in this specification.</p>
  </div>
  <section>
  <h6 id="aria-role-attribute">ARIA Role Attribute</h6>
  Every HTML element may have an ARIA <code>role</code> attribute specified. This is an ARIA Role
  attribute as defined by [[!WAI-ARIA]].

  The attribute, if specified, must have a value that is a set of space-separated tokens;
  each token must be a non-abstract role defined in the WAI-ARIA specification [[!WAI-ARIA]].

  <div class="impl">
    The WAI-ARIA role that an HTML element has assigned to it is the first non-abstract role found
    in the list of values generated when the <code>role</code> attribute is split on spaces.
  </div>
  </section>
  <section>
  <h6 id="state-and-property-attributes">State and Property Attributes</h6>
  Every HTML element may have ARIA state and property attributes specified. These attributes are
  defined by [[!WAI-ARIA]].

  A subset of the ARIA State and Property attributes are defined as
  "<dfn lt="global aria-* attributes|global States and properties">Global States and Properties</dfn>"
  in the [[!WAI-ARIA]] Specification.

  These attributes, if specified, must have a value that is the ARIA value type in the "Value" field
  of the definition for the state or property, mapped to the appropriate HTML value type according
  to [[!WAI-ARIA]].

  ARIA State and Property attributes can be used on any element. They   are not always meaningful,
  however, and in such cases user agents   might not perform any processing aside from including them
  in the DOM.   State and property attributes are processed according to the requirements of the
  HTML Accessibility API Mappings specification <a href="https://w3c.github.io/aria/html-aam/html-aam.html">[html-aam-1.0]</a>,
  as well as [[!WAI-ARIA]] and , as   defined in the ARIA  specifications [[!WAI-ARIA]] and
  <a href="https://w3c.github.io/aria/core-aam/core-aam.html">[core-aam-1.1]</a>.

  </section>
  </section>
</section>
<section>
 <h5 id="allowed-aria-roles-states-and-properties">Allowed ARIA roles, states and properties</h5>

  <em>This section is non-normative.</em>

  <p class="note">
    The following table provides an informative reference to the ARIA roles, states and properties
    permitted for use in HTML. All ARIA roles, states and properties are normatively defined in the
    [[!WAI-ARIA]] specification. Links to ARIA roles, states and properties in the table reference
    the normative [[!WAI-ARIA]] definitions.
  </p>

 <table>
    <caption>
      <abbr title="Accessible Rich Internet Applications">ARIA</abbr> Roles, States and Properties
    </caption>
    <thead>
      <tr>
        <th>Role</th>
        <th>Description</th>
        <th>Required Properties</th>
        <th>Supported Properties</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>any</td>
        <td>ARIA <a>global states and properties</a> can be used on any HTML element.</td>
        <td>none</td>
        <td>

          * <code>aria-atomic</code>
          * <code>aria-busy (state)</code>
          * <code>aria-controls</code>
          * <code>aria-describedby</code>
          * <code>aria-disabled (state)</code>
          * <code>aria-dropeffect</code>
          * <code>aria-flowto</code>
          * <code>aria-grabbed (state)</code>
          * <code>aria-haspopup</code>
          * <code>aria-hidden (state)</code>
          * <code>aria-invalid (state)</code>
          * <code>aria-label</code>
          * <code>aria-labelledby</code>
          * <code>aria-live</code>
          * <code>aria-owns</code>
          * <code>aria-relevant</code>

        </td>
      </tr>
      <tr>
        <td><code>alert</code></td>
        <td>
          A message with important, and usually time-sensitive, information. See related
          <code>alertdialog</code> and <code>status</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>alertdialog</code></td>
        <td>
          A type of dialog that contains an alert message, where initial focus goes to an element
          within the dialog. See related <code>alert</code> and <code>dialog</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>application</code></td>
        <td>A region declared as a web application, as opposed to a web document.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>article</code></td>
        <td>
          A section of a page that consists of a composition that forms an independent part of a
          document, page, or site.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>banner</code></td>
        <td>
          A region that contains mostly site-oriented content, rather than page-specific content.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>button</code></td>
        <td>
          An input that allows for user-triggered actions when clicked or pressed. See related
          <code>link</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>
          * <code>aria-pressed (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>checkbox</code></td>
        <td>A checkable input that has three possible values: true, false, or mixed.</td>
        <td>

          * <code>aria-checked (state)</code>

        </td>
        <td></td>
      </tr>
      <tr>
        <td><code>columnheader</code></td>
        <td>A cell containing header information for a column.</td>
        <td>none</td>
        <td>

          * <code>aria-sort</code>
          * <code>aria-readonly</code>
          * <code>aria-required</code>
          * <code>aria-selected (state)</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>combobox</code></td>
        <td>
          A presentation of a select; usually similar to a textbox where users can type ahead to
          select an option, or type to enter arbitrary text as a new item in the list. See related
          <code>listbox</code>.
        </td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
        <td>

          * <code>aria-autocomplete</code>
          * <code>aria-required</code>
          * <code>aria-activedescendant</code>

        </td>
      </tr>
      <tr>
        <td><code>complementary</code></td>
        <td>
          A supporting section of the document, designed to be complementary to the main content at
          a similar level in the DOM hierarchy, but remains meaningful when separated from the main
          content.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>contentinfo</code></td>
        <td>A large perceivable region that contains information about the parent document.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>definition</code></td>
        <td>A definition of a term or concept.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>dialog</code></td>
        <td>
          A dialog is an application window that is designed to interrupt the current processing of
          an application in order to prompt the user to enter information or require a response. See
          related <code>alertdialog</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>directory</code></td>
        <td>A list of references to members of a group, such as a static table of contents.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>document</code></td>
        <td>
          A region containing related information that is declared as document content, as opposed
          to a web application.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>form</code></td>
        <td>
          A landmark region that contains a collection of items and objects that, as a whole,
          combine to create a form. See related <code>search</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>grid</code></td>
        <td>
          A grid is an interactive control which contains cells of tabular data arranged in rows and
          columns, like a table.
        </td>
        <td>none</td>
        <td>

          * <code>aria-level</code>
          * <code>aria-multiselectable</code>
          * <code>aria-readonly</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>gridcell</code></td>
        <td>A cell in a grid or treegrid.</td>
        <td>none</td>
        <td>

          * <code>aria-readonly</code>
          * <code>aria-required</code>
          * <code>aria-selected (state)</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>group</code></td>
        <td>
          A set of user interface objects which are not intended to be included in a page summary or
          table of contents by assistive technologies.
        </td>
        <td>none</td>
        <td>

          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>heading</code></td>
        <td>A heading for a section of the page.</td>
        <td>none</td>
        <td>

          * <code>aria-level</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>img</code></td>
        <td>A container for a collection of elements that form an image.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>link</code></td>
        <td>
          An interactive reference to an internal or external resource that, when activated, causes
          the user agent to navigate to that resource. See related <code>button</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>list</code></td>
        <td>
          A group of non-interactive list items. See related <code>listbox</code>.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

          </td>
      </tr>
      <tr>
        <td><code>listbox</code></td>
        <td>
          A widget that allows the user to select one or more items from a list of choices. See
          related <code>combobox</code> and <code>list</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-multiselectable</code>
          * <code>aria-required</code>
          * <code>aria-expanded (state)</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>listitem</code></td>
        <td>A single item in a <code>list</code> or <code>directory</code>.</td>
        <td>none</td>
        <td>

          * <code>aria-level</code>
          * <code>aria-posinset</code>
          * <code>aria-setsize</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>log</code></td>
        <td>
          A type of live region where new information is added in meaningful order and old
          information may disappear. See related <code>marquee</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>main</code></td>
        <td>The main content of a document.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>marquee</code></td>
        <td>
          A type of live region where non-essential information changes frequently. See related
          <code>log</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>math</code></td>
        <td>Content that represents a mathematical expression. </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>menu</code></td>
        <td>A type of widget that offers a list of choices to the user.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>menubar</code></td>
        <td>
          A presentation of menu that usually remains visible and is usually presented horizontally.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>menuitem</code></td>
        <td>
          An option in a group of choices contained by a <code>menu</code> or <code>menubar</code>.
        </td>
        <td>none</td>
        <td></td>
      </tr>
      <tr>
        <td><code>menuitemcheckbox</code></td>
        <td>A checkable menuitem that has three possible values: true, false, or mixed.</td>
        <td>

          * <code>aria-checked (state)</code>

        </td>
        <td></td>
      </tr>
      <tr>
        <td><code>menuitemradio</code></td>
        <td>
          A checkable menuitem in a group of <code>menuitemradio</code> roles, only one of which can
          be checked at a time.
        </td>
        <td>

          * <code>aria-checked (state)</code>

        </td>
        <td>

          * <code>aria-posinset</code>
          * <code>aria-selected (state)</code>
          * <code>aria-setsize</code>

        </td>
      </tr>
      <tr>
        <td><code>navigation</code></td>
        <td>
          A collection of navigational elements (usually links) for navigating the document or
          related documents.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

          </td>
      </tr>
      <tr>
        <td><code>note</code></td>
        <td>
          A section whose content is parenthetic or ancillary to the main content of the resource.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>option</code></td>
        <td>A selectable item in a select list.</td>
        <td>none</td>
        <td>

          * <code>aria-checked (state)</code>
          * <code>aria-posinset</code>
          * <code>aria-selected (state)</code>
          * <code>aria-setsize</code>

        </td>
      </tr>
      <tr>
        <td><code>presentation</code></td>
        <td>
          An element whose implicit native role semantics will not be mapped to the accessibility
          API.
        </td>
        <td>none</td>
        <td></td>
      </tr>
      <tr>
        <td><code>progressbar</code></td>
        <td>An element that displays the progress status for tasks that take a long time.</td>
        <td>none</td>
        <td>

          * <code>aria-valuemax</code>
          * <code>aria-valuemin</code>
          * <code>aria-valuenow</code>
          * <code>aria-valuetext</code>

        </td>
      </tr>
      <tr>
        <td><code>radio</code></td>
        <td>
          A checkable input in a group of radio roles, only one of which can be checked at a time.
        </td>
        <td>

          * <code>aria-checked (state)</code>

        </td>
        <td>

          * <code>aria-posinset</code>
          * <code>aria-selected (state)</code>
          * <code>aria-setsize</code>

        </td>
      </tr>
      <tr>
        <td><code>radiogroup</code></td>
        <td>A group of radio buttons.</td>
        <td>none</td>
        <td>

          * <code>aria-required</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>region</code></td>
        <td>
          A large perceivable section of a web page or document, that the author feels is important
          enough to be included in a page summary or table of contents, for example, an area of the
          page containing live sporting event statistics.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>row</code></td>
        <td>A row of cells in a grid.</td>
        <td>none</td>
        <td>

          * <code>aria-level</code>
          * <code>aria-selected (state)</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>rowgroup</code></td>
        <td>A group containing one or more row elements in a grid.</td>
        <td>none</td>
        <td>

          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>rowheader</code></td>
        <td>A cell containing header information for a row in a grid.</td>
        <td>none</td>
        <td>

          * <code>aria-sort</code>
          * <code>aria-readonly</code>
          * <code>aria-required</code>
          * <code>aria-selected (state)</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>scrollbar</code></td>
        <td>
          A graphical object that controls the scrolling of content within a viewing area,
          regardless of whether the content is fully displayed within the viewing area.
        </td>
        <td>

          * <code>aria-controls</code>
          * <code>aria-orientation</code>
          * <code>aria-valuemax</code>
          * <code>aria-valuemin</code>
          * <code>aria-valuenow</code>

        </td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>search</code></td>
        <td>
          A landmark region that contains a collection of items and objects that, as a whole,
          combine to create a search facility. See related <code>form</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>
          * <code>aria-orientation</code>

        </td>
      </tr>
      <tr>
        <td><code>separator</code></td>
        <td>
          A divider that separates and distinguishes sections of content or groups of menuitems.
        </td>
        <td>none</td>
        <td>

          * <code>aria-valuetext</code>

        </td>
      </tr>
      <tr>
        <td><code>slider</code></td>
        <td>A user input where the user selects a value from within a given range.</td>
        <td>

          * <code>aria-valuemax</code>
          * <code>aria-valuemin</code>
          * <code>aria-valuenow</code>

        </td>
        <td>

          * <code>aria-orientation</code>
          * <code>aria-valuetext</code>

        </td>
      </tr>
      <tr>
        <td><code>spinbutton</code></td>
        <td>A form of range that expects the user to select from among discrete choices.</td>
        <td>

          * <code>aria-valuemax</code>
          * <code>aria-valuemin</code>
          * <code>aria-valuenow</code>

        </td>
        <td>

          * <code>aria-required</code>
          * <code>aria-valuetext</code>

        </td>
      </tr>
      <tr>
        <td><code>status</code></td>
        <td>
          A container whose content is advisory information for the user but is not important enough
          to justify an alert, often but not necessarily presented as a status bar. See related
          <code>alert</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>tab</code></td>
        <td>
          A grouping label providing a mechanism for selecting the tab content that is to be
          rendered to the user.
        </td>
        <td>none</td>
        <td>

          * <code>aria-selected (state)</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>tablist</code></td>
        <td>A list of tab elements, which are references to tabpanel elements.</td>
        <td>none</td>
        <td>

          * <code>aria-level</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>tabpanel</code></td>
        <td>
          A container for the resources associated with a <code>tab</code>, where each
          <code>tab</code> is contained in a <code>tablist</code>.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>textbox</code></td>
        <td>Input that allows free-form text as its value.</td>
        <td>none</td>
        <td>

          * <code>aria-activedescendant</code>
          * <code>aria-autocomplete</code>
          * <code>aria-multiline</code>
          * <code>aria-readonly</code>
          * <code>aria-required</code>

        </td>
      </tr>
      <tr>
        <td><code>timer</code></td>
        <td>
          A type of live region containing a numerical counter which indicates an amount of elapsed
          time from a start point, or the time remaining until an end point.
        </td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>toolbar</code></td>
        <td>A collection of commonly used function buttons represented in compact visual form.</td>
        <td>none</td>
        <td>

          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>tooltip</code></td>
        <td>A contextual popup that displays a description for an element.</td>
        <td>none</td>
        <td>

          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>tree</code></td>
        <td>
          A type of list that may contain sub-level nested groups that can be collapsed and
          expanded.
        </td>
        <td>none</td>
        <td>

          * <code>aria-multiselectable</code>
          * <code>aria-required</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>

        </td>
      </tr>
      <tr>
        <td><code>treegrid</code></td>
        <td>A grid whose rows can be expanded and collapsed in the same manner as for a tree.</td>
        <td>none</td>
        <td>

          * <code>aria-level</code>
          * <code>aria-multiselectable</code>
          * <code>aria-readonly</code>
          * <code>aria-activedescendant</code>
          * <code>aria-expanded (state)</code>
          * <code>aria-required</code>

        </td>
      </tr>
      <tr>
        <td><code>treeitem</code></td>
        <td>
          An option item of a tree. This is an element within a tree that may be expanded or
          collapsed if it contains a sub-level group of treeitems.
        </td>
        <td>none</td>
        <td>

          * <code>aria-level</code>
          * <code>aria-posinset</code>
          * <code>aria-setsize</code>
          * <code>aria-expanded (state)</code>
          * <code>aria-checked (state)</code>
          * <code>aria-selected (state)</code>

        </td>
      </tr>
    </tbody>
  </table>

</section>
